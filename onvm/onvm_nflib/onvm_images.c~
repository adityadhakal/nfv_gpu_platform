#include <rte_common.h>
#include <rte_mbuf.h>
#include <rte_ip.h>
#include <rte_mempool.h>
#include <rte_cycles.h>
#include <rte_ring.h>
#include <rte_ethdev.h>
#include <rte_ether.h>
#include <rte_udp.h>
#include <rte_malloc.h>

#include "onvm_common.h"
#include "onvm_images.h"
#include "onvm_nflib.h"
#include "onvm_nflib_internal.h"

void image_init(struct onvm_nf_info *nf, void *pending_img){

  //first check if the alternate is active or not
    if(pending_img == NULL){
      //create buffer for list of pending image (first time)
      nf->image_pending = (void *) rte_malloc(NULL, sizeof(void *)*MAX_IMAGE, 0);
    }
    else
      {
	//attach to the alternate one's buffer
	nf->image_pending = pending_img;
      }
}

//get a new image from mempool

image_data *get_image(void){
  int ret;
  struct image_data *img;
  ret = rte_mempool_get(nf_image_pool,(void **)(&img));
  if(ret != 0){
    RTE_LOG(INFO, APP, "unable to allocate image from pool \n");
    return NULL;
  }
  return img;
}


void delete_image(image_data *image){
  rte_mempool_put(nf_image_pool, (void *)image);
}
