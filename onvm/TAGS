
lib/cJSON.c,3461
    #define INTEGER_SIZE 38,1403
    #define INTEGER_SIZE 41,1481
    #define INTEGER_SIZE 44,1568
typedef int cjbool;50,1704
#define true 51,1724
#define false 52,1749
static const char *global_ep global_ep54,1776
const char *cJSON_GetErrorPtr(cJSON_GetErrorPtr56,1814
extern const char* cJSON_Version(61,1877
static int cJSON_strcasecmp(70,2098
static char* cJSON_strdup(94,2643
void cJSON_InitHooks(114,2940
static cJSON *cJSON_New_Item(cJSON_New_Item129,3269
void cJSON_Delete(141,3483
static const char *parse_number(parse_number165,4063
static int pow2gt 235,5527
    char *buffer;buffer257,5864
    int length;258,5882
    int offset;259,5898
    cjbool noalloc;260,5914
} printbuffer;261,5934
static char* ensure(264,6026
static int update(304,6808
static char *print_number(print_number317,7067
static unsigned parse_hex4(392,8774
static const unsigned char firstByteMark[firstByteMark478,10336
static const char *parse_string(parse_string490,10616
static char *print_string_ptr(print_string_ptr668,16259
static char *print_string(print_string814,19465
static const char *skip(skip828,20158
cJSON *cJSON_ParseWithOpts(cJSON_ParseWithOpts839,20352
cJSON *cJSON_Parse(cJSON_Parse879,21321
char *cJSON_Print(cJSON_Print885,21461
char *cJSON_PrintUnformatted(cJSON_PrintUnformatted890,21542
char *cJSON_PrintBuffered(cJSON_PrintBuffered895,21634
int cJSON_PrintPreallocated(910,21939
static const char *parse_value(parse_value921,22241
static char *print_value(print_value969,23247
static const char *parse_array(parse_array1072,26053
static char *print_array(print_array1139,27448
static const char *parse_object(parse_object1308,31275
static char *print_object(print_object1403,33298
int    cJSON_GetArraySize(1684,39643
cJSON *cJSON_GetArrayItem(cJSON_GetArrayItem1696,39811
cJSON *cJSON_GetObjectItem(cJSON_GetObjectItem1708,40006
cjbool cJSON_HasObjectItem(1718,40225
static void suffix_object(1724,40392
static cJSON *create_reference(create_reference1731,40534
void   cJSON_AddItemToArray(1746,40851
void   cJSON_AddItemToObject(1769,41233
void   cJSON_AddItemToObjectCS(1787,41606
void cJSON_AddItemReferenceToArray(1805,42053
void cJSON_AddItemReferenceToObject(1810,42177
cJSON *cJSON_DetachItemFromArray(cJSON_DetachItemFromArray1815,42333
void cJSON_DeleteItemFromArray(1847,42925
cJSON *cJSON_DetachItemFromObject(cJSON_DetachItemFromObject1852,43045
void cJSON_DeleteItemFromObject(1869,43356
void cJSON_InsertItemInArray(1875,43538
void cJSON_ReplaceItemInArray(1901,44013
void cJSON_ReplaceItemInObject(1931,44551
cJSON *cJSON_CreateNull(cJSON_CreateNull1954,45112
cJSON *cJSON_CreateTrue(cJSON_CreateTrue1965,45259
cJSON *cJSON_CreateFalse(cJSON_CreateFalse1976,45406
cJSON *cJSON_CreateBool(cJSON_CreateBool1987,45555
cJSON *cJSON_CreateNumber(cJSON_CreateNumber1998,45724
cJSON *cJSON_CreateString(cJSON_CreateString2011,45949
extern cJSON *cJSON_CreateRaw(cJSON_CreateRaw2028,46272
cJSON *cJSON_CreateArray(cJSON_CreateArray2045,46590
cJSON *cJSON_CreateObject(cJSON_CreateObject2056,46737
cJSON *cJSON_CreateIntArray(cJSON_CreateIntArray2068,46910
cJSON *cJSON_CreateFloatArray(cJSON_CreateFloatArray2096,47408
cJSON *cJSON_CreateDoubleArray(cJSON_CreateDoubleArray2124,47909
cJSON *cJSON_CreateStringArray(cJSON_CreateStringArray2152,48411
cJSON *cJSON_Duplicate(cJSON_Duplicate2181,48931
void cJSON_Minify(2254,50745

lib/cJSON.h,1289
#define cJSON__h24,1111
#define CJSON_VERSION_MAJOR 32,1191
#define CJSON_VERSION_MINOR 33,1221
#define CJSON_VERSION_PATCH 34,1251
#define cJSON_False 42,1410
#define cJSON_True 43,1440
#define cJSON_NULL 44,1470
#define cJSON_Number 45,1500
#define cJSON_String 46,1530
#define cJSON_Array 47,1560
#define cJSON_Object 48,1590
#define cJSON_Raw 49,1620
#define cJSON_IsReference 51,1666
#define cJSON_StringIsConst 52,1696
typedef struct cJSON55,1756
    struct cJSON *next;next58,1897
    struct cJSON *prev;prev59,1921
    struct cJSON *child;child61,2059
    int type;64,2127
    char *valuestring;valuestring67,2216
    int valueint;69,2290
    double valuedouble;71,2359
    char *string;string74,2492
} cJSON;75,2510
typedef struct cJSON_Hooks77,2520
      void *(*malloc_fn)malloc_fn79,2549
      void (*free_fn)free_fn80,2586
} cJSON_Hooks;81,2620
#define cJSON_AddNullToObject(163,7722
#define cJSON_AddTrueToObject(164,7821
#define cJSON_AddFalseToObject(165,7920
#define cJSON_AddBoolToObject(166,8021
#define cJSON_AddNumberToObject(167,8123
#define cJSON_AddStringToObject(168,8229
#define cJSON_AddRawToObject(169,8335
#define cJSON_SetIntValue(172,8521
#define cJSON_SetNumberValue(173,8631
#define cJSON_ArrayForEach(176,8785

onvm_nflib/onvm_flow_table.h,989
#define _ONVM_FLOW_TABLE_H_42,1996
#define DEFAULT_HASH_FUNC 58,2330
#define DEFAULT_HASH_FUNC 61,2404
struct onvm_ft 64,2454
        struct rte_hash* hash;65,2471
        char* data;66,2502
        int cnt;67,2522
        int entry_size;68,2539
struct onvm_ft_ipv4_5tuple 71,2567
        uint32_t src_addr;72,2596
        uint32_t dst_addr;73,2623
        uint16_t src_port;74,2650
        uint16_t dst_port;75,2677
        uint8_t  proto;76,2704
union ipv4_5tuple_host 82,2903
                uint8_t  pad0;84,2945
                uint8_t  proto;85,2976
                uint16_t virt_port;86,3008
                uint32_t ip_src;87,3044
                uint32_t ip_dst;88,3077
                uint16_t port_src;89,3110
                uint16_t port_dst;90,3145
        __m128i xmm;92,3191
_onvm_ft_print_key(128,4115
onvm_ft_get_data(139,4692
onvm_ft_fill_key(144,4824
onvm_ft_fill_key_symmetric(173,5865
onvm_ft_ipv4_hash_crc(195,6529
onvm_softrss(222,7434

onvm_nflib/onvm_comm_utils.h,1119
#define _ONVM_COMM_UTILS_H_42,2043
#define HAS_CLOCK_GETTIME_MONOTONIC65,2665
#define USE_THIS_CLOCK 67,2708
typedef struct onvm_time_s 69,2907
  struct timespec t;71,2971
  struct timeval t;73,2998
} __rte_cache_aligned onvm_time_t;75,3025
typedef struct onvm_interval_timer_s 77,3061
        onvm_time_t ts;78,3100
        onvm_time_t tp;79,3124
} __rte_cache_aligned onvm_interval_timer_t;80,3148
#define SECOND_TO_MICRO_SECOND 95,3605
#define NANO_SECOND_TO_MICRO_SECOND(96,3657
#define MICRO_SECOND_TO_SECOND(97,3718
typedef struct stats_time_info 99,3910
        uint8_t in_read;100,3943
        onvm_time_t prev_time;101,3968
        onvm_time_t cur_time;102,3999
} __rte_cache_aligned nf_stats_time_info_t;103,4029
typedef struct stats_cycle_info 106,4098
        uint8_t in_read;107,4132
        uint64_t prev_cycles;108,4157
        uint64_t cur_cycles;109,4187
} __rte_cache_aligned stats_cycle_info_t;110,4216
#define TS_TYPE_LOGICAL 124,4680
#define TS_TYPE_SYS_CLOCK 126,4762
#define TS_TYPE_CPU_CYCLES 128,4855
#define TS_RX_PACKET_RATE 130,4888
#define USE_TS_TYPE 131,4960

onvm_nflib/onvm_pkt_helper.h,611
#define _ONVM_PKT_HELPER_H_42,1998
#define IP_PROTOCOL_TCP 53,2160
#define IP_PROTOCOL_UDP 54,2186
#define TCP_FLAGS57,2232
#define TCP_FLAG_FIN 58,2250
#define TCP_FLAG_SYN 59,2278
#define TCP_FLAG_RST 60,2306
#define TCP_FLAG_PSH 61,2334
#define TCP_FLAG_ACK 62,2362
#define TCP_FLAG_URG 63,2390
#define TCP_FLAG_ECE 65,2425
#define TCP_FLAG_CWR 66,2453
#define TCP_FLAG_NS 67,2481
#define SUPPORTS_IPV4_CHECKSUM_OFFLOAD 69,2510
#define SUPPORTS_TCP_CHECKSUM_OFFLOAD 70,2556
#define SUPPORTS_UDP_CHECKSUM_OFFLOAD 71,2601
#define ONVM_PKT_GET_FLAGS(74,2692
#define ONVM_PKT_SET_FLAGS(80,2898

onvm_nflib/onvm_images.h,1488
#define _ONVM_IMAGES_H2,23
#define NUM_IN_PKTS 4,47
#define NUM_SIZE 5,70
#define IMAGE_NUM_ELE 6,106
#define IMAGE_SIZE 7,138
#define NUM_OF_PKTS 8,169
#define IMAGE_BATCH 9,223
#define IMAGENET_OUTPUT_SIZE 10,245
#define NF_IMAGE_STATS_PERIOD_MS 11,279
#define NF_INFERENCE_PERIOD 12,340
typedef enum data_status{data_status17,422
typedef enum data_status{empty,empty17,422
typedef enum data_status{empty, occupied,17,422
typedef enum data_status{empty, occupied, ready}ready17,422
typedef enum data_status{empty, occupied, ready} data_status;17,422
typedef struct data_struct{data_struct18,597
  int file_id;19,625
  int position;20,640
  int number_of_elements;21,656
  float data_array[data_array22,682
}data_struct;data_struct23,715
typedef struct image_data{image_data30,853
  int image_id;31,880
  void ** img_data_ptrs;32,896
  int batch_size;33,921
  float image_data_arr[image_data_arr34,969
  float output[output35,1099
  float stats[stats36,1203
  struct timespec timestamps[timestamps37,1282
  int num_data_points_stored;38,1491
  data_status status;39,1613
} image_data;40,1734
  struct gpu_callback{gpu_callback43,1794
    struct onvm_nf_info *nf_info;nf_info44,1817
    struct image_data *ready_image;ready_image45,1851
int gpu_finish_work_flag;50,1952
int * gpu_queue_image_id;68,2693
struct gpu_callback *gpu_callbacks;gpu_callbacks70,2837
int num_elements_in_gpu_queue;71,2873
int gpu_queue_current_index;72,2904

onvm_nflib/onvm_nflib_internal.h,2205
#define _ONVM_NFLIB_INTERNAL_H_53,2288
#define NF_PKT_BATCH_SIZE 83,3084
#define RTDSC_CYCLE_COST 86,3222
#define ENABLE_TIMER_BASED_NF_CYCLE_COMPUTATION95,3662
#define ENABLE_STATIC_ID 98,3774
#define ENABLE_LOCAL_LATENCY_PROFILER 101,3919
#define NF_STATS_PERIOD_IN_MS 110,4286
#define MEMCPY_SIZE 115,4428
#define TEST_MEMCPY_MODE_PER_PACKET116,4461
#define TEST_MEMCPY_MODE_PER_BATCH118,4533
struct port_info *ports;ports124,4757
static struct rte_ring *mgr_msg_ring;mgr_msg_ring127,4824
static struct rte_ring *nf_msg_ring;nf_msg_ring130,4899
static struct rte_ring *tx_ring,tx_ring133,4991
static struct rte_ring *tx_ring, *rx_ring;rx_ring133,4991
static struct rte_ring *tx_sring,tx_sring136,5068
static struct rte_ring *tx_sring, *rx_sring;rx_sring136,5068
static struct rte_ring *mgr_rsp_ring;mgr_rsp_ring141,5202
struct onvm_nf *nfs nfs145,5303
struct onvm_nf *this_nf this_nf146,5366
uint16_t **services;services149,5513
uint16_t *nf_per_service_count;nf_per_service_count150,5534
static struct rte_mempool *nf_info_mp;nf_info_mp156,5668
static struct rte_mempool *nf_msg_pool;nf_msg_pool159,5748
static struct rte_mempool *pktmbuf_pool;pktmbuf_pool162,5816
static struct rte_mempool *nf_image_pool;nf_image_pool166,5903
static struct rte_mempool *image_states_pool;image_states_pool167,5945
static uint16_t initial_instance_id 171,6057
static uint16_t service_id 175,6135
static uint8_t keep_running 179,6227
struct onvm_service_chain *default_chain;default_chain184,6313
uint64_t counter 189,6442
static rte_atomic16_t * flag_p;194,6747
static sem_t *mutex;mutex199,6865
struct rte_timer stats_timer;204,6984
onvm_interval_timer_t ts,208,7101
onvm_interval_timer_t ts, g_ts;208,7101
void *base_memory base_memory212,7201
pkt_handler_func pkt_hdl_func 217,7356
callback_handler_func cb_func 218,7394
#define ONVM_NO_CALLBACK 219,7432
#define YEILD_DUE_TO_EXPLICIT_REQ 286,8898
#define YIELD_DUE_TO_EMPTY_RX_RING 287,8938
#define YIELD_DUE_TO_FULL_TX_RING 288,8978
void *pReplicaStateMempool pReplicaStateMempool303,9448
dirty_mon_state_map_tbl_t *dirty_state_map dirty_state_map312,9749
uint8_t SV_ACCES_PER_PACKET;316,9941

onvm_nflib/histogram.h,1677
#define _HISTOGRAM_H_ 3,23
#define HIST_BUCKETS 6,127
#define HIST_RATE_MAX_VAL 8,153
#define HIST_COST_MAX_VAL 10,190
struct histogram 12,222
        uint32_t data[data14,242
        uint32_t bucket_size;15,279
        uint32_t max;16,309
        uint32_t min;17,367
        uint32_t max_val;19,425
        uint32_t min_val;20,494
        uint32_t total_count;22,562
        uint32_t running_avg;23,663
typedef struct histogram histogram_t;25,757
#define MAX_HISTOGRAM_SAMPLES 36,1179
#define MIN_SAMPLES_FOR_HISTOGRAM 37,1215
#define DISCARD_INITIAL_SAMPLES_COUNT 38,1254
typedef struct histogram_v2 41,1400
        uint32_t val[val42,1430
        uint32_t cur_index;43,1491
        uint32_t min_val;44,1554
        uint32_t max_val;45,1611
        uint32_t running_avg;46,1668
        uint32_t ewma_avg;47,1759
        histogram_t histogram;49,1815
        uint8_t is_initialized;50,1866
        uint32_t mean_val;51,1948
        uint32_t median_val;52,1996
        uint32_t mode_val;53,2046
        uint32_t perctl_val;54,2094
        uint32_t discard_mode;55,2145
}histogram_v2_t;histogram_v2_t57,2232
typedef enum HIST_VAL_TYPE 58,2249
        VAL_TYPE_RUNNING_AVG 59,2278
        VAL_TYPE_MEAN 60,2311
        VAL_TYPE_MEDIAN 61,2337
        VAL_TYPE_MODE 62,2365
        VAL_TYPE_ABS_MIN 63,2391
        VAL_TYPE_ABS_MAX 64,2421
        VAL_TYPE_25_PERCENTILE=65,2450
        VAL_TYPE_50_PERCENTILE=66,2484
        VAL_TYPE_50_PERCENTILE=VAL_TYPE_MEDIAN,66,2484
        VAL_TYPE_75_PERCENTILE=67,2532
        VAL_TYPE_90_PERCENTILE=68,2566
        VAL_TYPE_99_PERCENTILE=69,2600
}HIST_VAL_TYPE_E;HIST_VAL_TYPE_E70,2634

onvm_nflib/onvm_pkt_helper.c,991
onvm_pkt_mac_addr_swap(59,2270
onvm_pkt_set_mac_addr(87,2906
onvm_pkt_swap_src_mac_addr(110,3597
onvm_pkt_swap_dst_mac_addr(137,4331
onvm_pkt_ether_hdr(164,5075
onvm_pkt_tcp_hdr(172,5271
onvm_pkt_udp_hdr(188,5810
onvm_pkt_ipv4_hdr(204,6350
onvm_pkt_vlan_hdr(225,7314
onvm_pkt_is_tcp(237,7680
onvm_pkt_is_udp(242,7773
onvm_pkt_is_ipv4(247,7866
onvm_pkt_print(253,7963
onvm_pkt_print_tcp(271,8419
onvm_pkt_print_udp(302,9905
onvm_pkt_print_ipv4(310,10200
void onvm_pkt_print_ether(345,11903
onvm_pkt_parse_ip(391,13747
onvm_pkt_parse_mac(408,14132
onvm_pkt_get_checksum_offload_flags(428,14624
calculate_tcpudp_cksum(452,15476
                uint32_t saddr;458,15725
                uint32_t daddr;459,15757
                uint8_t reserved;460,15789
                uint8_t protocol;461,15839
                uint16_t total_length;462,15873
calculate_ip_cksum(488,16628
onvm_pkt_set_checksums(494,16810
onvm_tcp_con_close(542,18901
onvm_tcp_ack_close(554,19231

onvm_nflib/onvm_nflib.c,2953
#define NF_MODE_UNKNOWN 76,2858
#define NF_MODE_SINGLE 77,2884
#define NF_MODE_RING 78,2909
#define ONVM_NO_CALLBACK 80,2933
#define ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT83,2965
#define __DEBUG__NDSYNC_LOGS__84,3020
onvm_interval_timer_t nd_ts;88,3136
int64_t max_nd,89,3165
int64_t max_nd, min_nd,89,3165
int64_t max_nd, min_nd, avg_nd,89,3165
int64_t max_nd, min_nd, avg_nd, delta_nd;89,3165
static inline void allocate_base_memory(97,3466
static inline void do_memcopy(100,3563
nf_explicit_callback_function nf_ecb 108,3842
static uint8_t need_ecb 109,3887
void register_explicit_callback_function(110,3916
gpu_message_processing_func nf_gpu_func;123,4458
void register_gpu_msg_handling_function(124,4499
uint32_t get_nf_core_id(144,5013
int set_cgroup_cpu_share(148,5079
void init_cgroup_info(164,5803
typedef struct pal_packet 194,7109
        uint64_t pal_counter;195,7137
        uint64_t pal_info;196,7167
}pal_packet_t;pal_packet_t197,7194
static inline int send_packets_out(198,7209
int generate_and_transmit_pals_for_batch(218,8145
stats_timer_cb(294,11951
init_nflib_timers(307,12444
void onvm_nf_yeild(324,13207
static inline void  onvm_nf_wake_notify(358,14314
static inline void onvm_nflib_implicit_wakeup(367,14596
static inline void start_ppkt_processing_cost(375,14835
static inline void end_ppkt_processing_cost(380,15075
onvm_nflib_wait_till_notification(411,16529
static inline void onvm_nflib_check_and_wait_if_interrupted(430,17487
static inline void onvm_nflib_handle_tx_shadow_ring(447,18390
static inline void synchronize_replica_nf_state_memory(479,20078
static inline void update_processed_packet_ts(523,22093
static inline int onvm_nflib_fetch_packets(548,23375
inline int onvm_nflib_post_process_packets_batch(583,25060
static inline int onvm_nflib_process_packets_batch(681,30591
onvm_nflib_run_callback(773,34105
onvm_nflib_run(840,36592
onvm_nflib_return_pkt(846,36749
onvm_nflib_return_pkt_bulk(863,37305
onvm_nflib_stop(878,37909
onvm_nflib_init(883,38029
onvm_nflib_drop_pkt(1030,43400
void notify_for_ecb(1036,43530
onvm_nflib_handle_msg(1047,43730
onvm_nflib_dequeue_messages(1119,46877
onvm_nflib_info_init(1131,47398
onvm_nflib_usage(1179,49010
onvm_nflib_parse_args(1189,49226
onvm_nflib_handle_signal(1233,50780
onvm_nflib_cleanup(1245,51079
onvm_nflib_notify_ready(1286,52772
void onvm_send_gpu_msg_to_mgr(1362,55794
void load_ml_file(1381,56419
void evaluate_the_image(1408,57323
void evaluate_an_image_from_mempool(1415,57712
void CUDART_CB gpu_image_callback_function(1457,59752
static int get_image_index(1515,61947
static image_data *get_image(get_image1526,62159
 static void delete_image(1547,62901
void copy_data_to_image(1557,63249
void initialize_ml_timers(1579,64356
void compute_ml_stats(1601,65108
onvm_nflib_start_nf(1616,65642
static void set_cpu_sched_policy_and_mode(1700,69547
init_shared_cpu_info(1711,69828

onvm_nflib/onvm_comm_utils.c,1169
  struct timespec start,52,2273
  struct timespec start, stop;52,2273
  struct timespec gstart,53,2304
  struct timespec gstart, gstop;53,2304
  struct timeval start,55,2343
  struct timeval start, stop;55,2343
  struct timeval gstart,56,2373
  struct timeval gstart, gstop;56,2373
inline int onvm_util_get_cur_time(60,2414
inline int onvm_util_get_start_time(76,2817
inline int onvm_util_get_stop_time(91,3217
inline int64_t onvm_util_get_elapsed_time(106,3616
inline int64_t onvm_util_get_diff_time_now(118,4066
inline unsigned long onvm_util_get_difftime_us(131,4503
uint64_t onvm_util_get_current_cpu_cycles(143,4944
uint64_t onvm_util_get_diff_cpu_cycles(148,5043
uint64_t onvm_util_get_diff_cpu_cycles_in_us(156,5229
uint64_t onvm_util_get_elapsed_cpu_cycles(164,5465
uint64_t onvm_util_get_elapsed_cpu_cycles_in_us(169,5627
uint64_t gPkts=174,5828
#define USE_DISTINCT_FIELDS177,5892
int onvm_util_mark_timestamp_on_RX_packets(180,5937
    uint64_t total_cycles;206,6850
    uint64_t total_pkts;207,6877
} latency_numbers;208,6902
int onvm_util_calc_chain_processing_latency(210,6931
int onvm_util_get_marked_packet_timestamp(268,9253

onvm_nflib/onvm_sort.h,709
#define _ONVM_SORT_H_3,23
typedef enum ONVM_SORT_DATA_TYPE 6,126
        ONVM_SORT_TYPE_INT 7,161
        ONVM_SORT_TYPE_UINT32 8,193
        ONVM_SORT_TYPE_UINT64 9,228
        ONVM_SORT_TYPE_CUSTOM 10,263
}ONVM_SORT_DATA_TYPE_E;ONVM_SORT_DATA_TYPE_E11,298
typedef enum ONVM_SORT_MODE 12,322
        SORT_ASCENDING 13,352
        SORT_DESCENDING 14,379
}ONVM_SORT_MODE_E;ONVM_SORT_MODE_E15,407
typedef int (*comp_func)comp_func17,427
typedef int (*comp_func_s)comp_func_s18,481
typedef struct onvm_callback_thunk 40,1450
        ONVM_SORT_DATA_TYPE_E type;41,1487
        ONVM_SORT_MODE_E mode;42,1523
        comp_func_s cf;43,1554
}onvm_callback_thunk_t;onvm_callback_thunk_t44,1578

onvm_nflib/onvm_includes.h,34
#define _ONVM_INCLUDES_H_54,2345

onvm_nflib/onvm_config_common.h,212
#define _ONVM_CONFIG_COMMON_H_42,2016
#define MAX_SERVICE_ID_SIZE 46,2068
#define PROC_TYPE_SECONDARY 50,2172
#define FLAG_N 51,2224
#define FLAG_R 52,2244
#define FLAG_L 53,2264
#define FLAG_DASH 54,2284

onvm_nflib/onvm_flow_dir.c,725
#define NO_FLAGS 53,2332
struct onvm_ft *sdn_ft;sdn_ft56,2353
struct onvm_ft **sdn_ft_p;sdn_ft_p57,2377
onvm_flow_dir_set_index(60,2410
int onvm_flow_dir_reset_entry(73,2827
onvm_flow_dir_init(85,3176
onvm_flow_dir_nf_init(107,3871
onvm_flow_dir_get_pkt(122,4185
onvm_flow_dir_add_pkt(130,4360
onvm_flow_dir_del_pkt(138,4537
onvm_flow_dir_del_and_free_pkt(155,4851
onvm_flow_dir_get_key(170,5244
onvm_flow_dir_add_key(178,5443
onvm_flow_dir_del_key(186,5645
onvm_flow_dir_del_and_free_key(203,6075
onvm_flow_dir_print_stats__old(220,6823
static inline uint32_t get_index_of_sc(265,9250
extract_active_service_chains(282,9812
onvm_flow_dir_print_stats(330,12810
onvm_flow_dir_clear_all_entries(363,14625

onvm_nflib/onvm_flow_dir.h,395
#define _ONVM_FLOW_DIR_H_42,2035
struct onvm_flow_entry 50,2183
        struct onvm_ft_ipv4_5tuple *key;key51,2208
        struct onvm_service_chain *sc;sc52,2249
        uint64_t ref_cnt;53,2288
        uint16_t idle_timeout;54,2314
        uint16_t hard_timeout;55,2345
        uint64_t packet_count;56,2376
        uint64_t byte_count;57,2407
        uint64_t entry_index;58,2436

onvm_nflib/onvm_pkt_common.c,302
onvm_pkt_process_tx_batch(96,3262
onvm_pkt_flush_all_nfs(140,5447
onvm_pkt_flush_nf_queue(151,5708
onvm_pkt_enqueue_nf(186,6823
onvm_pkt_flush_port_queue(221,7994
onvm_pkt_enqueue_tx_thread(250,8936
onvm_pkt_enqueue_port(272,9620
onvm_pkt_process_next_action(287,10069
onvm_pkt_drop(332,11733

onvm_nflib/onvm_sc_common.h,30
#define _SC_COMMON_H_42,2056

onvm_nflib/onvm_sc_mgr.c,210
active_sc_entries_t active_sc_list;49,2175
static inline int add_chain_to_active_sc_list(53,2374
const active_sc_entries_t* onvm_sc_get_all_active_chains(60,2704
onvm_sc_get(64,2830
onvm_sc_create(69,2901

onvm_nflib/onvm_pkt_common.h,36
#define _ONVM_PKT_COMMON_H_54,2310

onvm_nflib/onvm_common.h,20783
#define _COMMON_H_43,2037
#define ONVM_GPU 56,2251
#define ONVM_GPU_SAME_SIZE_PKTS 57,2270
#define ONVM_CACHE_LINE_SIZE 60,2451
#define ENABLE_HIGH_THROUGHPUT_MODE63,2606
#define ENABLE_LOW_LATENCY_MODE65,2678
#define MIN(69,2730
#define MAX(73,2788
#define ARBITER_PERIOD_IN_US 76,2834
#define MAX_NFS 78,2963
#define MAX_SERVICES 79,3030
#define MAX_NFS_PER_SERVICE 80,3113
#define RTE_MP_RX_DESC_DEFAULT 84,3272
#define RTE_MP_TX_DESC_DEFAULT 85,3380
#define NF_QUEUE_RINGSIZE 86,3564
#define RTE_MP_RX_DESC_DEFAULT 88,3731
#define RTE_MP_TX_DESC_DEFAULT 89,3844
#define NF_QUEUE_RINGSIZE 90,3957
#define RTE_MP_RX_DESC_DEFAULT 92,4088
#define RTE_MP_TX_DESC_DEFAULT 93,4195
#define NF_QUEUE_RINGSIZE 94,4302
#define ONVM_PACKETS_BATCH_SIZE 97,4436
#define PACKET_READ_SIZE 98,4524
#define NF_MSG_QUEUE_SIZE 99,4575
#define ONVM_NUM_RX_THREADS 102,4691
#define ONVM_NUM_TX_THREADS 103,4728
#define ONVM_NUM_MGR_AUX_THREADS 104,4765
#define ONVM_MAX_CHAIN_LENGTH 106,4870
#define SDN_FT_ENTRIES 107,4938
#define ONVM_NF_ACTION_DROP 110,5033
#define ONVM_NF_ACTION_NEXT 111,5080
#define ONVM_NF_ACTION_TONF 112,5197
#define ONVM_NF_ACTION_OUT 113,5311
#define ONVM_NF_ACTION_TO_NF_INSTANCE 114,5405
#define ONVM_ENABLE_SPEACILA_NF121,5939
#define INTERRUPT_SEM124,6055
#define ENABLE_NF_TX_STAT_LOGS133,6330
#define ENABLE_PORT_TX_STATS_LOGS136,6410
#define ENABLE_SYNC_MGR_TO_NF_MSG139,6517
#define PROFILE_PACKET_PROCESSING_LATENCY171,7485
#define ONVM_SPECIAL_NF_SERVICE_ID 180,7853
#define ONVM_SPECIAL_NF_INSTANCE_ID 182,7929
#define ENABLE_PCAP_CAPTURE_ON_OUTPUT192,8405
#define USE_SEMAPHORE 205,8791
#define NF_LOCAL_BACKPRESSURE 208,8952
#define ENABLE_CGROUPS_FEATURE 214,9203
#define ENABLE_NFV_RESL 217,9315
#define ENABLE_FT_INDEX_IN_META 220,9443
#define ENABLE_NF_WAKE_NOTIFICATION_COUNTER223,9567
#define ENABLE_NF_YIELD_NOTIFICATION_COUNTER224,9611
#define USE_POLL_MODE229,9695
#define ENABLE_USE_RTE_TIMER_MODE_FOR_MAIN_THREAD 240,10079
#define BOTTLENECK_NF_STATUS_RESET 257,10906
#define BOTTLENECK_NF_STATUS_WAIT_ENQUEUED 258,10958
#define BOTTLENECK_NF_STATUS_DROP_MARKED 259,11010
#define NF_BACKPRESSURE_APPROACH_1 265,11310
#define NF_BACKPRESSURE_APPROACH_2 269,11493
#define ENABLE_RING_WATERMARK273,11715
#define ENABLE_NF_BASED_BKPR_MARKING 277,11975
#define USE_BKPR_V2_IN_TIMER_MODE 304,13734
#define DROP_PKTS_ONLY_AT_RX_ENQUEUE 310,14088
#define ENABLE_SAVE_BACKLOG_FT_PER_NF 314,14242
#define BACKPRESSURE_USE_RING_BUFFER_MODE 316,14429
#define USE_CGROUPS_PER_NF_INSTANCE343,16002
#define ENABLE_DYNAMIC_CGROUP_WEIGHT_ADJUSTMENT346,16117
#define USE_DYNAMIC_LOAD_FACTOR_FOR_CPU_SHARE349,16247
#define STORE_HISTOGRAM_OF_NF_COMPUTATION_COST352,16411
#define ETHER_TYPE_RSYNC_DATA 370,17264
#define ETHER_TYPE_BFD 371,17304
#define ENABLE_NF_MGR_IDENTIFIER 374,17368
#define ENABLE_BFD 375,17442
#define ENABLE_PER_SERVICE_MEMPOOL 377,17592
#define ENABLE_REPLICA_STATE_UPDATE 378,17686
#define ENABLE_REMOTE_SYNC_WITH_TX_LATCH 379,17823
#define RESL_UPDATE_MODE_PER_BATCH 382,18116
#define ENABLE_ND_MARKING_IN_NFS 383,18231
#define ENABLE_PER_FLOW_TS_STORE 387,18363
#define ENABLE_CHAIN_BYPASS_RSYNC_ISOLATION 388,18521
#define ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT 389,18664
#define PRIMARY_NODE 391,18836
#define SECONDARY_NODE 392,18865
#define PREDECESSOR_NODE 393,18894
#undef ENABLE_CHAIN_BYPASS_RSYNC_ISOLATION 411,19747
#undef ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT 412,19833
#undef ENABLE_REPLICA_STATE_UPDATE437,21239
#undef ENABLE_REMOTE_SYNC_WITH_TX_LATCH438,21274
#undef ENABLE_PER_FLOW_TS_STORE439,21314
#undef ENABLE_CHAIN_BYPASS_RSYNC_ISOLATION440,21346
#undef ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT441,21389
#define SHADOW_RING_UPDATE_PER_PKT446,21513
#define SHADOW_RING_UPDATE_PER_BATCH448,21554
#define PER_FLOW_TS_UPDATE_PER_PKT458,21828
#define PER_FLOW_TS_UPDATE_PER_BATCH460,21869
#define REPLICA_STATE_UPDATE_MODE_PER_PACKET467,21998
#define REPLICA_STATE_UPDATE_MODE_PER_BATCH469,22049
#define ONVM_NUM_RSYNC_THREADS 474,22148
#define ONVM_NUM_RSYNC_PORTS 475,22188
#define USE_BATCHED_RSYNC_TRANSACTIONS 476,22271
#define ENABLE_RSYNC_WITH_DOUBLE_BUFFERING_MODE 479,22664
#define _TX_RSYNC_TX_PORT_RING_NAME 481,22872
#define TX_RSYNC_TX_PORT_RING_SIZE 482,22958
#define _TX_RSYNC_TX_LATCH_RING_NAME 483,23091
#define TX_RSYNC_TX_LATCH_RING_SIZE 484,23178
#define _TX_RSYNC_NF_LATCH_RING_NAME 485,23253
#define TX_RSYNC_NF_LATCH_RING_SIZE 486,23340
#define _TX_RSYNC_TX_LATCH_DB_RING_NAME 489,23461
#define _TX_RSYNC_NF_LATCH_DB_RING_NAME 490,23554
#define TX_RSYNC_TX_LATCH_DB_RING_SIZE 491,23647
#define TX_RSYNC_NF_LATCH_DB_RING_SIZE 492,23717
#define ENABLE_RSYNC_MULTI_BUFFERING 495,23979
#define TX_RSYNC_AUTOCLEAR_ELAPSED_TRANSACTIONS_TIMERS 497,24216
#define USE_BATCHED_RSYNC_TRANSACTIONS500,24402
#define ONVM_NUM_RSYNC_THREADS 504,24461
#define _NF_STATE_MEMPOOL_NAME 507,24509
#define _NF_STATE_SIZE 508,24559
#define _NF_STATE_CACHE 509,24597
#define CLIENT_SHADOW_RING_SIZE 512,24657
#define _SERVICE_STATE_MEMPOOL_NAME 516,24785
#define _SERVICE_STATE_SIZE 517,24841
#define _SERVICE_STATE_CACHE 518,24923
#define _PER_FLOW_TS_MEMPOOL_NAME 522,25000
#define _PER_FLOW_TS_SIZE 523,25050
#define _PER_FLOW_TS_CACHE 524,25205
#define _PER_FLOW_TS_CACHE_MAX_ENTRIES 525,25240
#define MAX_ACTIVE_CLIENTS 529,25332
#define MAX_STANDBY_CLIENTS 530,25373
#define ACTIVE_NF_MASK 531,25433
typedef struct onvm_per_flow_ts_info 533,25482
        uint64_t ts;534,25521
}  __attribute__((__packed__)) onvm_per_flow_ts_info_t;535,25542
#define ONVM_NUM_RSYNC_THREADS 538,25635
#define PIGGYBACK_BFD_ON_ACTIVE_PORT_TRAFFIC 544,25874
#define BFD_TX_PORT_QUEUE_ID 545,26088
#define BFD_TX_PORT_QUEUE_ID 547,26169
#define RSYNC_TX_PORT_QUEUE_ID_0 552,26331
#define RSYNC_TX_PORT_QUEUE_ID_1 554,26414
#define RSYNC_TX_OUT_PORT 555,26479
#define ONVM_NF_MGR_TX_QUEUES 556,26515
#define ONVM_NF_MGR_TX_QUEUES 558,26582
#define PRIMARY_OUT_PORT 562,26694
#define SECONDARY_OUT_PORT 563,26726
typedef struct dirty_mon_state_map_tbl 575,27442
        uint64_t dirty_index;576,27483
}dirty_mon_state_map_tbl_t;dirty_mon_state_map_tbl_t578,27567
typedef struct dirty_mon_state_map_tbl_txts 580,27596
        uint8_t dirty_index;581,27642
}dirty_mon_state_map_tbl_txts_t;dirty_mon_state_map_tbl_txts_t583,27725
#define DISTRIBUTED_NIC_PORT 594,28301
#define SET_BIT(601,28721
static inline void set_bit(602,28770
#define CLEAR_BIT(606,28858
static inline void clear_bit(607,28912
#define TOGGLE_BIT(611,29005
static inline void toggle_bit(612,29059
#define TEST_BIT(615,29149
static inline long test_bit(616,29200
static inline long is_upstream_NF(620,29295
static inline long is_immediate_upstream_NF(635,30162
static inline long get_index_of_highest_set_bit(647,30828
#define ONVM_CHECK_BIT(657,31226
#define ONVM_SET_BIT(658,31284
#define ONVM_CLEAR_BIT(659,31338
struct onvm_pkt_meta 663,31528
        uint8_t action;664,31551
        uint8_t destination;665,31604
        uint8_t src;666,31656
        uint8_t chain_index;667,31713
        uint16_t ft_index;669,31827
	uint8_t flags;671,31931
        uint8_t reserved_word;672,32037
#define NF_NEED_ND_SYNC 675,32221
#define NF_BYPASS_RSYNC 676,32252
static inline struct onvm_pkt_meta* onvm_get_pkt_meta(678,32284
static inline uint8_t onvm_get_pkt_chain_index(682,32418
struct packet_buf 702,33287
        struct rte_mbuf *buffer[buffer703,33307
        uint16_t count;704,33358
struct tx_thread_info 712,33524
        unsigned first_nf;713,33548
        unsigned last_nf;714,33575
        struct packet_buf *port_tx_bufs;port_tx_bufs715,33601
struct queue_mgr 722,33749
        unsigned id;723,33768
        enum {NF,NF724,33789
        enum {NF, MGR}MGR724,33789
        enum {NF, MGR} mgr_type_t;724,33789
                struct tx_thread_info *tx_thread_info;tx_thread_info726,33840
                struct packet_buf *to_tx_buf;to_tx_buf727,33895
        struct packet_buf *nf_rx_bufs;nf_rx_bufs729,33952
struct rx_stats{rx_stats732,33995
        uint64_t rx[rx733,34012
struct tx_stats{tx_stats737,34056
        uint64_t tx[tx738,34073
        uint64_t tx_drop[tx_drop739,34112
struct port_info 743,34161
        uint8_t num_ports;744,34180
        uint8_t id[id745,34207
        struct ether_addr mac[mac746,34245
        uint8_t down_status[down_status747,34294
        volatile struct rx_stats rx_stats;748,34377
        volatile struct tx_stats tx_stats;749,34420
struct thread_info 757,34685
       unsigned queue_id;758,34706
       unsigned first_cl;759,34732
       unsigned last_cl;760,34774
       struct packet_buf *nf_rx_buf;nf_rx_buf765,35067
       struct packet_buf *port_tx_buf;port_tx_buf766,35104
       struct packet_buf *port_tx_direct_buf;port_tx_direct_buf768,35186
typedef int(*pkt_handler_func)pkt_handler_func774,35383
typedef int(*callback_handler_func)callback_handler_func776,35570
typedef void(*advanced_rings_func)advanced_rings_func778,35718
typedef void(*setup_func)setup_func780,35868
struct onvm_nf_scale_info 783,35987
        struct onvm_nf_info *parent;parent784,36015
        uint16_t instance_id;785,36052
        uint16_t service_id;786,36082
        const char *tag;tag787,36111
        void *data;data788,36136
        setup_func setup_func;789,36156
        pkt_handler_func pkt_func;790,36187
        callback_handler_func callback_func;791,36222
        advanced_rings_func adv_rings_func;792,36267
struct wakeup_info 798,36414
        unsigned first_client;799,36435
        unsigned last_client;800,36466
        uint64_t num_wakeups;801,36496
typedef struct bottleneck_ft_data 807,36588
        uint16_t chain_index;808,36624
         struct onvm_flow_entry* bft;809,36704
}bottleneck_ft_data_t;bottleneck_ft_data_t810,36763
typedef struct bottleneck_ft_info 811,36786
        uint16_t bft_count;812,36822
        uint16_t r_h;813,36889
        uint16_t w_h;814,36951
        uint16_t max_len;815,37014
        bottleneck_ft_data_t bft[bft817,37135
}bottlenect_ft_info_t;bottlenect_ft_info_t818,37192
struct onvm_nf 826,37348
        struct rte_ring *rx_q;rx_q827,37365
        struct rte_ring *tx_q;tx_q828,37396
        struct rte_ring *msg_q;msg_q829,37427
        struct onvm_nf_info *info;info830,37459
        uint16_t instance_id;831,37494
        uint8_t nf_mode;833,37580
        uint16_t parent;835,37649
        struct queue_mgr *nf_tx_mgr;nf_tx_mgr837,37730
        pkt_handler_func nf_pkt_function;840,37803
        callback_handler_func nf_callback_function;841,37845
        advanced_rings_func nf_advanced_rings_function;842,37897
        setup_func nf_setup_function;843,37953
                volatile uint64_t rx;854,38389
                volatile uint64_t rx_drop;855,38427
                volatile uint64_t tx;856,38470
                volatile uint64_t tx_drop;857,38508
                volatile uint64_t tx_buffer;859,38581
                volatile uint64_t tx_returned;860,38626
                volatile uint64_t act_out;861,38673
                volatile uint64_t act_tonf;862,38716
                volatile uint64_t act_drop;863,38760
                volatile uint64_t act_next;864,38804
                volatile uint64_t act_buffer;865,38848
                volatile uint64_t wakeup_count;869,39023
                volatile uint64_t yield_count;872,39147
                volatile uint64_t comp_cost;875,39242
                volatile uint64_t bkpr_drop;879,39357
                uint16_t max_rx_q_len;882,39482
                uint16_t max_tx_q_len;883,39521
                uint16_t bkpr_count;884,39560
        } stats;886,39646
        uint16_t is_bottleneck;890,39883
        onvm_time_t s_time;893,40017
        bottlenect_ft_info_t bft_list;897,40093
        const char *sem_name;sem_name902,40258
        key_t shm_key;903,40288
        rte_atomic16_t *volatile shm_server;905,40408
        sem_t *mutex;mutex908,40475
        uint8_t throttle_this_upstream_nf;912,40539
        uint64_t throttle_count;914,40680
        void *nf_state_mempool;nf_state_mempool921,40962
        void *service_state_pool;service_state_pool924,41151
        void *per_flow_ts_info;per_flow_ts_info929,41288
        struct rte_ring *rx_sq;rx_sq933,41355
        struct rte_ring *tx_sq;tx_sq934,41387
} __rte_cache_aligned;937,41458
#define NUMBER_OF_MODELS 951,41724
#define MAX_IMAGE 952,41751
struct image_information{image_information954,41826
  void *image_pending[image_pending956,41900
  void *ready_images[ready_images957,42010
  int num_of_ready_images;958,42091
  int index_of_ready_image;959,42156
struct get_alternate_NF_ready{get_alternate_NF_ready962,42245
  int gpu_percentage;963,42276
typedef struct models_attributes{models_attributes967,42377
  int number_of_inputs;968,42411
  int *input_dimensions;input_dimensions969,42435
  int number_of_parameters;970,42460
  void *cuda_handles;cuda_handles971,42488
  int *gpu_percentages;gpu_percentages972,42510
  float * run_times;973,42577
  int num_of_runtimes;974,42650
}models_attributes;models_attributes975,42716
struct gpu_file_listing{gpu_file_listing978,42780
  int file_index;979,42805
  char model_name[model_name980,42823
  int load_flag;981,42846
  void *cpu_function;cpu_function982,42931
  void *gpu_function;gpu_function983,42953
  models_attributes attributes;984,42975
typedef struct provide_gpu_model{provide_gpu_model989,43087
  struct onvm_nf_info *nf;nf990,43121
  char model_name[model_name991,43148
  int model_index;992,43171
}provide_gpu_model;provide_gpu_model993,43190
struct image_information *all_images_information;all_images_information996,43247
static inline double time_difference_usec(1000,43317
struct onvm_nf_info 1016,43786
        uint16_t instance_id;1017,43808
        uint16_t service_id;1018,43838
        uint8_t status;1020,43886
        const char *tag;tag1021,44059
        void *data;data1022,44084
        pid_t pid;1023,44153
        void *nf_state_mempool;nf_state_mempool1026,44196
        void *service_state_pool;service_state_pool1028,44346
        uint32_t comp_cost;1032,44506
        uint32_t cpu_share;1036,44670
        uint32_t core_id;1037,44739
        uint32_t load;1038,44816
        uint32_t avg_load;1039,44946
        uint32_t svc_rate;1040,45017
        uint64_t exec_period;1043,45186
        uint32_t avg_svc;1046,45572
        uint32_t comp_pkts;1047,45651
        uint32_t drop_rate;1048,45860
        histogram_v2_t ht2;1053,46011
        histogram_v2_t ht2_q;1057,46110
        volatile uint8_t bNDSycn;1061,46202
        uint64_t bLastPktId;1062,46236
        int64_t max_nd,1064,46295
        int64_t max_nd, min_nd,1064,46295
        int64_t max_nd, min_nd, avg_nd,1064,46295
        int64_t max_nd, min_nd, avg_nd, delta_nd;1064,46295
  int gpu_model;1069,46376
  int gpu_percentage;1070,46394
  int job_completion_rate;1071,46436
  int gpu_execution_ready;1072,46490
  int candidate_for_restart;1073,46517
  void * function_ptr;1074,46576
  unsigned int number_of_pkts_outstanding;1077,46661
  unsigned int number_of_images_processed;1078,46754
  struct image_information *image_info;image_info1080,46859
  histogram_v2_t image_queueing_rate;1081,46926
  histogram_v2_t image_processing_rate;1082,47006
  histogram_v2_t end_to_end_image_processing_time;1084,47098
  histogram_v2_t image_processing_gpu_time;1085,47201
struct onvm_service_chain_entry 1094,47359
        uint16_t destination;1095,47393
        uint8_t action;1097,47469
        uint8_t service;1099,47535
struct onvm_service_chain 1103,47656
        struct onvm_service_chain_entry sc[sc1104,47684
        uint8_t chain_length;1105,47753
        uint8_t ref_cnt;1106,47783
        volatile uint8_t highest_downstream_nf_index_id;1108,47838
        uint8_t nf_instances_mapped;1110,48037
        uint8_t nf_instance_id[nf_instance_id1111,48135
#define MP_NF_RXQ_NAME 1118,48335
#define MP_NF_TXQ_NAME 1119,48375
#define _NF_MSG_QUEUE_NAME 1120,48415
#define PKTMBUF_POOL_NAME 1121,48460
#define MZ_PORT_INFO 1122,48507
#define MZ_NF_INFO 1123,48546
#define MZ_SERVICES_INFO 1124,48581
#define MZ_NF_PER_SERVICE_INFO 1125,48628
#define MZ_SCP_INFO 1126,48687
#define MZ_FTP_INFO 1127,48724
#define _MGR_MSG_QUEUE_NAME 1129,48762
#define _NF_MSG_QUEUE_NAME 1130,48832
#define _MGR_RSP_QUEUE_NAME 1131,48877
#define _NF_MEMPOOL_NAME 1132,48968
#define _NF_MSG_POOL_NAME 1133,49049
#define _NF_IMAGE_POOL_NAME 1136,49161
#define _IMAGE_STATE_POOL_NAME 1137,49246
#define SHMSZ 1142,49411
#define KEY_PREFIX 1143,49497
#define MP_CLIENT_SEM_NAME 1146,49581
#define MP_CLIENT_SEM_NAME 1149,49670
#define SAMPLING_RATE 1155,49906
#define ONVM_SPECIAL_NF 1156,49996
#define ONVM_NUM_WAKEUP_THREADS 1161,50118
#define ONVM_NUM_WAKEUP_THREADS 1163,50203
#define NF_WAITING_FOR_ID 1167,50323
#define NF_STARTING 1168,50446
#define NF_WAITING_FOR_RUN 1169,50555
#define NF_RUNNING 1170,50725
#define NF_PAUSED_BIT 1171,50793
#define NF_WT_ND_SYNC_BIT 1172,50890
#define NF_PAUSED 1173,51090
#define NF_WT_ND_SYNC 1174,51192
#define NF_STOPPED 1175,51308
#define NF_ID_CONFLICT 1176,51402
#define NF_NO_IDS 1177,51498
#define NF_NO_ID 1178,51588
#define ONVM_NF_HANDLE_TX 1179,51608
get_rx_queue_name(1185,51803
get_tx_queue_name(1202,52345
get_msg_queue_name(1217,52890
#define MP_NF_RXSQ_NAME 1228,53270
#define MP_NF_TXSQ_NAME 1229,53313
get_rx_squeue_name(1231,53383
get_tx_squeue_name(1238,53617
get_rsync_tx_port_ring_name(1247,53921
get_rsync_tx_tx_state_latch_ring_name(1253,54164
get_rsync_tx_nf_state_latch_ring_name(1259,54419
get_rsync_tx_tx_state_latch_db_ring_name(1266,54721
get_rsync_tx_nf_state_latch_db_ring_name(1272,54985
get_associated_active_or_standby_nf_id(1281,55260
is_primary_active_nf_id(1288,55483
is_secondary_active_nf_id(1292,55701
get_associated_active_nf_id(1296,55817
get_associated_standby_nf_id(1300,55929
get_rx_shmkey(1310,56155
get_sem_name(1319,56313
#define MP_CLIENT_CGROUP_NAME 1330,56678
get_cgroup_name(1332,56743
#define MP_CLIENT_CGROUP_PATH 1338,56935
get_cgroup_path(1340,57020
#define MP_CLIENT_CGROUP_CREAT 1346,57212
get_cgroup_create_cgroup_cmd(1348,57303
#define MP_CLIENT_CGROUP_ADD_TASK 1354,57510
get_cgroup_add_task_cmd(1356,57614
#define MP_CLIENT_CGROUP_SET_CPU_SHARE 1362,57839
get_cgroup_set_cpu_share_cmd(1364,57953
#define MP_CLIENT_CGROUP_SET_CPU_SHARE_ONVM_MGR 1370,58200
get_cgroup_set_cpu_share_cmd_onvm_mgr(1372,58313
set_cgroup_nf_cpu_share(1380,58593
set_cgroup_nf_cpu_share_from_onvm_mgr(1395,59227
#define RTE_LOGTYPE_APP 1413,59887
typedef struct per_core_nf_pool 1416,59960
        uint16_t nf_count;1417,59994
        uint32_t nf_ids[nf_ids1418,60021
}per_core_nf_pool_t;per_core_nf_pool_t1419,60055
typedef struct sc_entries 1423,60110
        struct onvm_service_chain *sc;sc1424,60138
        uint16_t sc_count;1425,60177
        uint16_t bneck_flag;1426,60204
}sc_entries_list;sc_entries_list1427,60233
typedef struct bottleneck_nf_entries 1433,60638
        onvm_time_t s_time;1434,60677
        uint16_t enqueue_status;1435,60705
        uint16_t nf_id;1436,60844
        uint16_t enqueued_ctr;1437,60868
        uint16_t marked_ctr;1438,60899
}bottleneck_nf_entries_t;bottleneck_nf_entries_t1439,60928
typedef struct bottlenec_nf_info 1440,60954
        uint16_t entires;1441,60989
        bottleneck_nf_entries_t nf[nf1443,61158
}bottlenec_nf_info_t;bottlenec_nf_info_t1444,61203
bottlenec_nf_info_t bottleneck_nf_list;1445,61225
#define WAIT_TIME_BEFORE_MARKING_OVERFLOW_IN_US 1449,61333
typedef struct fipo_buf_node 1460,62107
        void *pkt;pkt1461,62138
        struct fipo_buf_node *next;next1462,62157
        struct fipo_buf_node *prev;prev1463,62193
}fipo_buf_node_t;fipo_buf_node_t1464,62229
typedef struct fipo_list 1466,62248
        uint32_t buf_count;1467,62275
        fipo_buf_node_t *head;head1468,62303
        fipo_buf_node_t *tail;tail1469,62334
}fipo_list_t;fipo_list_t1470,62365
typedef fipo_list_t fipo_per_flow_list;1471,62379
#define MAX_NUM_FIPO_FLOWS 1474,62651
#define MAX_BUF_PER_FLOW 1475,62684
typedef struct nf_flow_list 1476,62783
        uint32_t flow_count;1477,62813
        fipo_per_flow_list *head;head1478,62842
        fipo_per_flow_list *tail;tail1479,62876
}nf_flow_list_t;nf_flow_list_t1480,62910
#define TEST_INLINE_FUNCTION_CALL1483,62960
typedef int(*nf_pkt_handler)nf_pkt_handler1485,63027

onvm_nflib/onvm_sc_common.c,93
int onvm_sc_append_entry(45,2099
int onvm_sc_set_entry(66,2795
void onvm_sc_print(84,3394

onvm_nflib/onvm_ringbuf.c,144
int onvm_su_ring_init(7,106
int onvm_su_ring_enqueu(16,417
int onvm_su_ring_dequeue(29,870
int onvm_su_ring_dinit(42,1349
int main(49,1566

onvm_nflib/onvm_config_common.c,483
#define IS_NULL_OR_EMPTY_STRING(49,2141
onvm_config_parse_file(52,2232
onvm_config_extract_corelist(90,3121
onvm_config_extract_memory_channels(122,3920
onvm_config_extract_portmask(141,4375
onvm_config_extract_output_location(160,4792
onvm_config_extract_service_id(183,5533
onvm_config_extract_instance_id(198,5910
onvm_config_get_item_count(213,6293
onvm_config_create_nf_arg_list(234,6694
onvm_config_create_onvm_args(373,11645
onvm_config_create_dpdk_args(441,14117

onvm_nflib/onvm_msg_common.h,967
#define _MSG_COMMON_H_44,2109
#define MSG_FROM_MGR 48,2154
#define MSG_NOOP 49,2181
#define MSG_STOP 50,2226
#define MSG_PAUSE 51,2271
#define MSG_RESUME 52,2316
#define MSG_RUN 53,2361
#define MAX_MSG_FROM_MGR 54,2402
#define MSG_GPU_MODEL 55,2437
#define MSG_RESTART 56,2527
#define MSG_GET_GPU_READY 57,2605
#define MSG_FROM_NF 59,2706
#define MSG_NF_STARTING 60,2733
#define MSG_NF_STOPPING 61,2777
#define MSG_NF_READY 62,2821
#define MSG_NF_UNBLOCK_SELF 63,2865
#define MSG_NF_REGISTER_ECB 64,2909
#define MSG_NF_TRIGGER_ECB 65,2953
#define MSG_NF_SYNC_RESP 66,2997
#define MSG_GIVE_GPU_MODEL 67,3041
#define MSG_NF_GPU_READY 68,3115
#define MSG_NF_RESTART_OK 69,3193
#define MSG_MODE_ASYNCHRONOUS 71,3273
#define MSG_MODE_SYNCHRONOUS 72,3309
struct onvm_nf_msg 74,3346
        uint8_t msg_type;75,3367
        uint8_t is_sync;77,3561
        void *msg_data;msg_data79,3689
#define ENABLE_MSG_CONSTRUCT_NF_INFO_NOTIFICATION83,3924

onvm_nflib/onvm_flow_table.c,294
uint8_t rss_symmetric_key[rss_symmetric_key49,2160
onvm_ft_create(63,2929
onvm_ft_add_pkt(109,4485
onvm_ft_lookup_pkt(132,5177
onvm_ft_remove_pkt(155,6004
onvm_ft_add_key(168,6330
onvm_ft_lookup_key(183,6732
onvm_ft_remove_key(198,7112
onvm_ft_iterate(214,7798
onvm_ft_free(221,8011

onvm_nflib/onvm_sort.c,495
#define MIN(6,83
#define MAX(7,121
#define MIN0(8,159
#define RUN_AVG(9,199
int onvm_cmp_int_a(11,244
int onvm_cmp_int_d(21,510
void onvm_sort_int(32,777
int onvm_cmp_uint32_a(40,1233
int onvm_cmp_uint32_d(50,1522
void onvm_sort_uint32(60,1811
int onvm_cmp_uint64_a(68,2286
int onvm_cmp_uint64_d(78,2575
void onvm_sort_uint64(88,2864
int onvm_cmp_uint32_r(97,3340
int onvm_cmp_func_r 119,4035
void onvm_sort_generic_r(131,4325
void onvm_sort_generic(159,5524
int main(185,6467

onvm_nflib/onvm_nflib.h,1612
#define _ONVM_NFLIB_H_54,2277
typedef int (*gpu_message_processing_func)gpu_message_processing_func289,9482
struct rte_timer image_stats_timer;300,10160
struct rte_timer image_inference_timer;303,10238
typedef int (*nf_explicit_callback_function)nf_explicit_callback_function314,10376
#define MAX_FILE_PATH_SIZE 321,10629
#define AIO_OPTION_SYNC_MODE_RW 322,10674
#define AIO_OPTION_BATCH_PROCESS 323,10752
#define AIO_OPTION_PER_FLOW_QUEUE 324,10822
typedef struct nflib_aio_info 325,10898
        uint8_t file_path[file_path326,10930
        int mode;327,10977
        uint32_t num_of_buffers;328,11037
        uint32_t max_buffer_size;329,11124
        uint32_t aio_options;330,11202
        uint32_t wait_pkt_queue_len;331,11274
}nflib_aio_info_t;nflib_aio_info_t332,11376
typedef struct onvm_nflib_aio_init_info 333,11395
        nflib_aio_info_t aio_read;334,11437
        nflib_aio_info_t aio_write;335,11496
        uint32_t max_worker_threads;336,11556
        uint8_t aio_service_type;337,11631
}onvm_nflib_aio_init_info_t;onvm_nflib_aio_init_info_t338,11722
typedef struct nflib_aio_status 339,11751
        int32_t rw_status;340,11785
        void *rw_buffer;rw_buffer341,11870
        uint8_t rw_buf_len;342,11973
        off_t rw_offset;343,12021
}nflib_aio_status_t;nflib_aio_status_t344,12092
typedef int (*aio_notify_handler_cb)aio_notify_handler_cb349,12260
typedef struct dirty_mon_state_map_tbl 366,13189
        uint64_t dirty_index;367,13230
}dirty_mon_state_map_tbl_t;dirty_mon_state_map_tbl_t369,13314
#define DIRTY_MAP_PER_CHUNK_SIZE 373,13373

onvm_nflib/histogram.c,623
#define MIN(6,83
#define MAX(7,121
#define MIN0(8,159
#define RUN_AVG(9,199
#define EWMA_ALPHA 10,243
#define EWMA_AVG(11,270
void hist_init(13,351
void hist_clear(38,994
void hist_store(42,1071
void hist_print(64,1788
uint32_t hist_mean(82,2549
uint32_t hist_median(99,2991
uint32_t hist_mode(145,4262
uint32_t hist_percentile(162,4790
uint32_t get_histogram(203,6179
uint32_t get_modes(227,6953
void hist_init_v2(265,8228
void hist_store_v2(283,8617
void hist_compute_v2(307,9526
void hist_extract_all_v2(329,10571
uint32_t hist_extract_v2(338,10857
void hist_print_v2(385,12409
int main(393,12717

onvm_nflib/onvm_ringbuf.h,316
#define _ONVM_SURING_H_3,25
#define MAX_RINGBUF_SIZE 6,130
typedef struct onvm_single_user_ring 7,164
        uint16_t r_count;8,203
        uint16_t r_h;9,271
        uint16_t w_h;10,334
        uint16_t max_len;11,398
        void* ring[ring12,462
}onvm_single_user_ring_t;onvm_single_user_ring_t13,500

onvm_nflib/onvm_sc_mgr.h,375
#define _SC_MGR_H_42,2043
typedef struct active_sc_entries 48,2112
        uint32_t sc_count;49,2147
        struct onvm_service_chain *sc[sc50,2174
} __rte_cache_aligned active_sc_entries_t;51,2229
onvm_next_action(55,2338
onvm_sc_next_action(63,2550
onvm_next_destination(68,2718
onvm_sc_next_destination(76,2923
onvm_sc_get_next_action_and_destionation(81,3096

onvm_mgr/onvm_mgr.h,81
#define _ONVM_MGR_H_54,2290
#define TO_PORT 90,3076
#define TO_CLIENT 91,3094

onvm_mgr/onvm_nf.c,2185
uint16_t next_instance_id 60,2455
uint8_t  global_bkpr_mode=64,2665
uint16_t downstream_nf_overflow 65,2694
uint16_t highest_downstream_nf_service_id=66,2731
uint16_t lowest_upstream_to_throttle 67,2776
uint64_t throttle_count 68,2818
#define EWMA_LOAD_ADECAY 71,2891
nf_schedule_info_t nf_sched_param;75,3069
#define DEFAULT_NF_CPU_SHARE 86,3686
typedef struct nf_core_and_cc_info 89,3806
        uint32_t total_comp_cost;90,3843
        uint32_t total_nf_count;91,3954
        uint32_t total_pkts_served;92,4048
        uint32_t total_load;93,4158
        uint64_t total_load_cost_fct;94,4259
}nf_core_and_cc_info_t;nf_core_and_cc_info_t95,4395
static inline void assign_nf_cgroup_weight(102,4754
static inline void assign_all_nf_cgroup_weight(113,5252
void compute_nf_exec_period_and_cgroup_weight(119,5445
void compute_and_assign_nf_cgroup_weight(199,11771
void extract_nf_load_and_svc_rate_info(289,18673
void compute_and_order_nf_wake_priority(331,21103
int nf_sort_func(343,21699
void setup_nfs_priority_per_core_list(361,22204
inline void monitor_nf_node_liveliness_via_pid_monitoring(395,23945
onvm_nf_is_valid(412,25028
onvm_nf_is_paused(417,25231
onvm_nf_is_processing(421,25330
onvm_nf_is_waiting_on_NDSYNC(425,25520
onvm_nf_is_NDSYNC_set(434,25896
onvm_nf_is_instance_id_free(444,26178
onvm_nf_next_instance_id(449,26281
int onvm_nf_recv_resp_msg(468,26865
void onvm_nf_recv_and_process_msgs(502,27979
onvm_nf_check_status(584,31009
onvm_nf_stats_update(600,31576
onvm_nf_service_to_nf_map_V2(620,32310
onvm_nf_service_to_nf_map(648,33223
onvm_nf_send_msg(682,34918
#define MAX_SYNC_RETRY_COUNT 703,35606
onvm_nf_send_msg_sync(706,35653
int onvm_nf_register_run(732,37001
onvm_nf_start(837,42901
onvm_nf_stop(898,45055
static sc_entries_list sc_list[sc_list982,48430
onvm_mark_all_entries_for_bottleneck(986,48490
onvm_clear_all_entries_for_bottleneck(1055,52222
int enqueu_nf_to_bottleneck_watch_list(1124,56585
int dequeue_nf_from_bottleneck_watch_list(1151,57951
static inline void mark_nf_backpressure_from_bottleneck_watch_list(1178,59305
int check_and_enqueue_or_dequeue_nfs_from_bottleneck_watch_list(1191,59817

onvm_mgr/zoo_queue.h,371
#define ZOOKEEPER_QUEUE_H_20,835
struct zkr_queue 36,1030
    zhandle_t *zh;zh37,1049
    char *path;path38,1068
    struct ACL_vector *acl;acl39,1084
    pthread_mutex_t pmutex;40,1112
    char *node_name;node_name41,1140
    int node_name_length;42,1161
    char *cached_create_path;cached_create_path43,1187
typedef struct zkr_queue zkr_queue_t;46,1221

onvm_mgr/onvm_pkt.h,29
#define _ONVM_PKT_H_54,2296

onvm_mgr/onvm_zookeeper.c,914
#define EXPIRATION_CACHE_LEN 66,2624
#define MAC_STR_LEN 67,2657
static zhandle_t *zh zh70,2719
static const clientid_t *myid myid71,2748
static char *nf_stat_paths[nf_stat_paths72,2786
struct remote_service_result 75,2857
        char mac_address[mac_address76,2888
        struct ether_addr mac_address_struct;77,2927
        time_t expiration;78,2973
static struct remote_service_result service_lookup_cache[service_lookup_cache80,3003
onvm_zk_connect(92,3558
onvm_zk_client_id(112,4014
onvm_zk_init(118,4115
onvm_zk_nf_start(159,5460
onvm_zk_nf_stop(214,7574
onvm_zk_disconnect(246,8576
onvm_zk_lookup_service(253,8689
onvm_zk_update_nf_stats(308,10830
update_service_last_modified(372,13274
get_service_last_modified(390,13862
can_scale_locally(415,14684
enqueue_remote_scale_msg(433,15261
can_scale_remotely(448,15701
mac_string_to_struct(494,17267
free_String_vector(517,17872

onvm_mgr/onvm_init.c,3273
struct onvm_nf *nfs nfs58,2377
struct port_info *ports ports59,2405
struct rte_mempool *pktmbuf_pool;pktmbuf_pool61,2438
struct rte_mempool *nf_info_pool;nf_info_pool62,2472
struct rte_mempool *nf_msg_pool;nf_msg_pool63,2506
struct rte_ring *mgr_msg_queue;mgr_msg_queue64,2539
struct rte_mempool *nf_image_pool;nf_image_pool67,2588
struct rte_mempool *image_states_pool;image_states_pool68,2623
struct rte_ring *mgr_rsp_queue;mgr_rsp_queue72,2703
struct rte_mempool *nf_state_pool;nf_state_pool76,2766
struct rte_mempool *service_state_pool;service_state_pool80,2868
void **services_state_pool;services_state_pool81,2908
struct rte_mempool *per_flow_ts_pool;per_flow_ts_pool86,3051
void *onvm_mgr_tx_per_flow_ts_info;onvm_mgr_tx_per_flow_ts_info88,3158
void *onvm_mgr_tx_per_flow_ts_info_db[onvm_mgr_tx_per_flow_ts_info_db91,3277
void *onvm_mgr_tx_per_flow_ts_info_db;onvm_mgr_tx_per_flow_ts_info_db93,3352
struct rte_ring *tx_port_ring[tx_port_ring99,3453
struct rte_ring *tx_tx_state_latch_ring[tx_tx_state_latch_ring100,3581
struct rte_ring *tx_nf_state_latch_ring[tx_nf_state_latch_ring101,3719
struct rte_ring *tx_tx_state_latch_db_ring[tx_tx_state_latch_db_ring104,3972
struct rte_ring *tx_nf_state_latch_db_ring[tx_nf_state_latch_db_ring105,4168
struct rte_ring *tx_tx_state_latch_db_ring[tx_tx_state_latch_db_ring107,4402
struct rte_ring *tx_nf_state_latch_db_ring[tx_nf_state_latch_db_ring108,4543
uint16_t **services;services113,4738
uint16_t *nf_per_service_count;nf_per_service_count114,4759
struct onvm_service_chain *default_chain;default_chain116,4792
struct onvm_service_chain **default_sc_p;default_sc_p117,4834
int onvm_socket_id;120,4929
void *zmq_ctx;zmq_ctx124,5006
void *onvm_socket_id;onvm_socket_id125,5021
void *onvm_socket_ctx;onvm_socket_ctx126,5043
uint8_t remote_eth_addr[remote_eth_addr130,5094
struct ether_addr remote_eth_addr_struct;131,5156
uint32_t nf_mgr_id;155,5816
#define RX_PTHRESH 178,6510
#define RX_HTHRESH 179,6582
#define RX_WTHRESH 180,6650
#define TX_PTHRESH 187,6932
#define TX_HTHRESH 188,7005
#define TX_WTHRESH 189,7074
static const struct rte_eth_conf port_conf 191,7150
static const struct rte_eth_rxconf rx_conf 212,7905
static const struct rte_eth_txconf tx_conf 221,8137
init(237,8515
init_mbuf_pools(360,13114
static int init_nf_state_pool(377,13889
static int init_service_state_pool(397,15041
static int init_per_flow_ts_pool(415,15982
                        #define PER_FLOW_TS_POOL_COUNT 419,16168
                        #define PER_FLOW_TS_POOL_COUNT 421,16289
                        #define PER_FLOW_TS_POOL_COUNT 425,16559
                        #define PER_FLOW_TS_POOL_COUNT 427,16650
                #define PER_FLOW_TS_POOL_COUNT 432,16815
                #define PER_FLOW_TS_POOL_COUNT 434,16890
static int init_rsync_tx_rings(455,17947
init_nf_msg_pool(524,23135
static int init_image_pool(540,23703
static int init_images_state(556,24257
init_client_info_pool(595,25581
init_port(639,27427
init_shm_rings(733,31486
init_mgr_queues(963,42462
check_all_ports_link_status(993,43388
#define CHECK_INTERVAL 994,43456
#define MAX_CHECK_TIME 995,43495
static uint32_t read_onvm_mgr_id_from_system(1056,46134

onvm_mgr/onvm_wakemgr.c,1309
unsigned nfs_wakethr[nfs_wakethr61,2542
struct wakeup_info *wakeup_infos;wakeup_infos64,2607
#define WAKE_INTERVAL_IN_US 76,3093
#define USLEEP_INTERVAL 77,3173
struct rte_timer wake_timer[wake_timer82,3473
typedef struct core_nf_timers 88,3685
        struct rte_timer    timer;89,3717
        uint16_t            timer_status;90,3752
        uint16_t            index;91,3815
        uint16_t            nf_id;92,3887
        uint16_t            core_id;93,3922
        uint16_t            next_nf_id;94,3959
        uint64_t            exec_period;95,3999
}core_nf_timers_t;core_nf_timers_t96,4040
core_nf_timers_t    core_timers[core_timers97,4059
static void wake_timer_cb(107,4544
initialize_wake_timers(119,5189
initialize_per_core_timers 140,5728
static void per_core_timer_cb(153,6222
int launch_core_nf_timer(168,6937
static void  arbiter_wakeup_client(194,8090
whether_wakeup_client(224,9395
notify_client(293,11976
wakeup_client_internal(301,12124
wakeup_client(315,12526
static inline void handle_wakeup_old(325,12764
static inline void handle_wakeup_ordered(332,12999
inline void handle_wakeup(362,14463
#define WAKE_THREAD_SLEEP_INTERVAL_NS 366,14609
wakemgr_main(368,14659
inline void check_and_wakeup_nf(389,15328
inline void check_and_block_nf(399,15679

onvm_mgr/onvm_gpu.h,1013
#define ONVM_GPU_H2,19
char ml_file_name[ml_file_name16,236
const char * ml_model_name[ml_model_name17,278
#define NUM_OF_RUNTIME_DATAPOINTS 19,325
struct gpu_file_listing * file_listing;22,443
const char *model_dir;model_dir25,522
static inline void set_filename(29,627
typedef enum nf_state{nf_state98,3068
typedef enum nf_state{zstart,zstart98,3068
typedef enum nf_state{zstart, zrestart,98,3068
typedef enum nf_state{zstart, zrestart, zstop}zstop98,3068
typedef enum nf_state{zstart, zrestart, zstop} nf_state;98,3068
typedef struct zinformation_format{zinformation_format100,3126
  int num_of_elements;101,3162
  int pid_array[pid_array102,3185
}zinfo_format;zinfo_format103,3205
typedef struct zmgr_msg_struct{zmgr_msg_struct106,3288
  nf_state state;107,3320
  size_t msg_size;108,3338
  struct timespec timestamp;109,3357
  zinfo_format information;110,3386
} zmgr_msg;111,3523
void * zmqContext;116,3591
void * zmqRequester;117,3610
const char * ipc_file_path;118,3631

onvm_mgr/onvm_pkt.c,787
static inline int get_flow_entry(62,2775
onvm_pkt_process_rx_batch(78,3293
onvm_pkt_process_tx_batch(137,5743
onvm_pkt_flush_all_ports(227,9586
onvm_pkt_flush_all_nfs(241,9838
onvm_pkt_drop_batch(254,10076
onvm_pkt_flush_port_queue(269,10378
onvm_pkt_flush_nf_queue(359,14075
onvm_pkt_enqueue_port(423,16400
onvm_pkt_enqueue_port_v2(439,16940
onvm_pkt_enqueue_nf(467,18006
onvm_pkt_process_next_action(609,25943
onvm_pkt_drop(664,28128
onvm_detect_and_set_ecn_ce(674,28287
#define CE_BITS 676,28421
static inline void write_ft_to_cl_bft(692,29174
static inline void read_all_ft_frm_cl_bft(729,31519
void onvm_set_back_pressure_v2(771,34011
onvm_set_back_pressure(790,34523
onvm_check_and_reset_back_pressure_v2(873,38901
onvm_check_and_reset_back_pressure(903,40146

onvm_mgr/main.c,1977
onvm_bfd_init_config_t bfd_config;68,2625
int node_role 73,2770
#define MAX_SHUTDOWN_ITERS 79,2999
static uint8_t main_keep_running 82,3090
static uint8_t worker_keep_running 86,3275
int process_nf_function_inline(91,3511
nf_pkt_handler nf_process_packet 94,3662
uint8_t remote_eth_addr[remote_eth_addr101,3819
struct ether_addr remote_eth_addr_struct;102,3847
typedef struct thread_core_map_t 105,3897
        unsigned rx_th_core[rx_th_core106,3932
        unsigned tx_t_core[tx_t_core107,3982
        unsigned wk_th_core[wk_th_core109,4034
        unsigned mn_th_core;111,4095
}thread_core_map_t;thread_core_map_t112,4124
static thread_core_map_t thread_core_map;113,4144
#define NF_STATUS_CHECK_PERIOD_IN_MS 117,4237
#define NF_STATUS_CHECK_PERIOD_IN_US 118,4318
#define DISPLAY_STATS_PERIOD_IN_MS 119,4448
#define NF_LOAD_EVAL_PERIOD_IN_MS 120,4526
#define USLEEP_INTERVAL_IN_US 121,4585
struct rte_timer display_stats_timer;128,5211
struct rte_timer nf_status_check_timer;129,5310
struct rte_timer nf_load_eval_timer;130,5438
struct rte_timer main_arbiter_timer;131,5548
display_stats_timer_cb(147,6360
nf_status_check_timer_cb(156,6681
nf_load_stats_timer_cb(164,6873
arbiter_timer_cb(185,7671
initialize_master_timers(198,8154
#define MAIN_THREAD_POLL249,10124
#define MAIN_THREAD_SLEEP_INTERVAL_NS 251,10174
master_thread_main(257,10309
rx_thread_main(344,13437
#define PACKET_READ_SIZE_TX 396,15804
tx_thread_main(398,15876
static inline int create_rx_threads(468,19113
static inline int create_tx_threads(487,20093
static inline int create_wakeup_threads(517,21791
static inline int create_rsync_threads(544,23399
main(558,23979
#define ENABLE_REPLAY_LATENCY_PROFILER694,28990
static onvm_interval_timer_t ts;696,29067
void replay_and_terminate_failover(698,29107
void initiate_node_failover(710,29511
static int bfd_handle_callback(728,30183
static void signal_handler(748,30996
register_signal_handler(765,31615

onvm_mgr/onvm_zk_watch.h,33
#define ONVM_ZK_WATCH_H_52,2338

onvm_mgr/onvm_bfd.h,2650
#define _ONVM_BFD_H_52,2352
#define BasePacketSize 94,4313
#define MaxAuthDataSize 97,4423
#define AuthHeaderSize 100,4516
#define MaxPacketSize 103,4635
#define ListenPort 106,4746
#define TTLValue 109,4805
#define MinSourcePort 112,4910
#define MaxSourcePort 115,5023
#define Version 118,5134
#define BaseMinTxInterval 121,5235
#define BFD_CHECKPOINT_PERIOD_IN_US 123,5273
#define BFDEchoInterval_us 126,5555
#define BFDMinRxInterval_us 127,5617
#define BFDMinTxInterval_us 128,5655
#define BFDEchoMissMultiplier 129,5693
#define BFDTimeoutValue_us 130,5778
#define BFDTimeoutErr_oft_us 131,5853
#define BFD_TIMEOUT_INTERVAL 132,5906
#define BFD_SLOW_SEND_RATE_RATIO_COUNTER 133,5982
#define BFD_MAX_PER_INTV_PER_PORT 134,6128
typedef enum BFD_StateValue136,6242
  AdminDown 138,6272
  Down 139,6289
  Init 140,6306
  Up 141,6323
}BFD_StateValue;BFD_StateValue142,6340
typedef enum BFD_DiagStateValue148,6410
  None 150,6444
  ControlDetectExpired 151,6456
  EchoFailed 152,6484
  NeighborSessionDown 153,6502
  ForwardingReset 154,6529
  PathDown 155,6552
  ConcatPathDown 156,6568
  AdmDown 157,6590
  ReverseConcatPathDown 158,6605
  MaxDiagnostic 159,6634
}BFD_DiagStateValue;BFD_DiagStateValue160,6655
typedef enum BFD_AuthTypeValue168,6811
  none 170,6844
  Password 171,6856
  MD5 172,6872
  MeticulousMD5 173,6883
  SHA1 174,6904
  MeticulousSHA1 175,6916
}BFD_AuthTypeValue;BFD_AuthTypeValue176,6938
typedef struct BfdPacketHeader183,7026
  uint8_t versAndDiag;185,7059
  uint8_t flags;186,7132
  uint8_t detectMult;187,7149
  uint8_t length;188,7171
  uint32_t myDisc;189,7222
  uint32_t yourDisc;190,7270
  uint32_t txDesiredMinInt;191,7320
  uint32_t rxRequiredMinInt;192,7348
  uint32_t rxRequiredMinEchoInt;193,7377
} __attribute__((__packed__)) BfdPacketHeader;216,8889
typedef struct BFDAuthData223,9020
  uint8_t type;225,9049
  uint8_t len;226,9065
  uint8_t data[data227,9080
}BFDAuthData;BFDAuthData233,9295
typedef struct BfdPacket238,9351
  BfdPacketHeader header;240,9378
}BfdPacket;BfdPacket242,9426
#define BFD_STATUS_REMOTE_DOWN 252,9543
#define BFD_STATUS_LOCAL_DOWN 253,9579
typedef int(*bfd_status_notifier_cb)bfd_status_notifier_cb254,9615
#define MAX_BFD_SESSIONS 255,9690
typedef struct onvm_bfd_init_config 256,9720
        uint32_t bfd_identifier;257,9758
        uint8_t num_ports;258,9791
        uint8_t session_mode[session_mode259,9818
        bfd_status_notifier_cb cb_func;260,9866
}onvm_bfd_init_config_t;onvm_bfd_init_config_t261,9906
#define BFD_SESSION_MODE_PASSIVE 263,9932
#define BFD_SESSION_MODE_ACTIVE 264,9972

onvm_mgr/onvm_args.h,66
#define _ONVM_ARGS_H_53,2302
#define DEFAULT_SERVICE_ID 60,2406

onvm_mgr/onvm_stats.c,935
#define onvm_stats_display_nfs(68,2676
static FILE *stats_out;stats_out93,3215
static FILE *json_stats_out;json_stats_out94,3239
char buffer[buffer100,3423
onvm_stats_init(105,3527
onvm_stats_set_output(113,3932
onvm_stats_cleanup(142,5190
void onvm_stats_display_rsync_tx_thread_stats(151,5449
onvm_stats_display_all(170,6503
onvm_stats_clear_all_clients(200,7501
onvm_stats_clear_client(213,7847
#define USE_EXTENDED_PORT_STATS223,8182
get_port_stats_rate(226,8257
void onvm_stats_display_mode(268,10788
onvm_stats_display_ports(316,12045
onvm_stats_display_clients(396,15803
void onvm_stats_display_chains(604,27034
onvm_stats_clear_terminal(614,27324
onvm_stats_print_MAC(623,27552
onvm_print_ethaddr(644,28344
onvm_stats_flush(652,28579
onvm_stats_truncate(663,28772
onvm_json_reset_objects(679,29227
static onvm_stats_snapshot_t sn_local[sn_local699,29923
int get_onvm_nf_stats_snapshot_v2(700,29981

onvm_mgr/onvm_bfd.c,1936
#define BFD_TX_PORT_QUEUE_ID 54,2401
#define BFD_PKT_OFFSET 59,2547
typedef struct bfd_session_status 61,2649
        uint8_t mode;63,2740
        BFD_StateValue local_state;66,2837
        BFD_StateValue remote_state;67,2873
        BFD_DiagStateValue local_diags;68,2910
        BFD_DiagStateValue remote_diags;69,2950
        uint64_t local_descr;72,3053
        uint64_t remote_descr;73,3083
        uint64_t tx_rx_interval;76,3211
        uint64_t last_sent_pkt_ts;78,3293
        uint64_t last_rcvd_pkt_ts;80,3382
        uint64_t pkt_missed_counter;82,3531
        uint64_t bfd_status_change_counter;84,3606
        uint64_t last_rx_pkts;88,3754
        uint8_t last_rx_set;89,3785
        uint8_t  skip_bfd_query;90,3814
}bfd_session_status_t;bfd_session_status_t93,3855
typedef struct bfd_pkt_stat_t 95,3879
        uint64_t rx_count;96,3911
        uint64_t tx_count;97,3938
}bfd_pkt_stat_t;bfd_pkt_stat_t98,3965
bfd_pkt_stat_t bfd_stat;100,3983
struct rte_timer bfd_status_checkpoint_timer;103,4050
bfd_session_status_t bfd_sess_info[bfd_sess_info104,4096
bfd_status_notifier_cb notifier_cb;105,4150
BfdPacket bfd_template;106,4186
static void init_bfd_session_status(120,4816
onvm_bfd_start(146,5859
onvm_bfd_stop(151,5907
bfd_status_checkpoint_timer_cb(155,5961
static inline int initialize_bfd_timers(169,6700
static inline int bfd_send_packet_out(176,7101
static void set_bfd_packet_template(184,7469
int print_bfd_packet(194,8026
static void parse_and_set_bfd_session_info(205,8802
struct rte_mbuf* create_bfd_packet(238,10917
int parse_bfd_packet(292,13017
static void send_bfd_echo_packets(310,13796
static void check_bdf_remote_status(340,15377
onvm_bfd_process_incoming_packets(395,18500
onvm_bfd_init(405,18867
onvm_bfd_deinit(427,19631
int onvm_print_bfd_status(432,19677
struct rte_mbuf* create_bfd_packet_spcl(458,21563
void send_bfd_echo_packets_spcl(503,23351

onvm_mgr/onvm_ft_install.c,1068
typedef struct onvm_ft_args 71,2775
        const char* servicechain_file;72,2805
        const char* ipv4rules_file;73,2883
        const char* base_ip_addr;74,2968
        uint32_t max_ip_addrs;75,3050
        uint32_t max_ft_rules;76,3136
        uint32_t rev_order;77,3220
}onvm_ft_args_t;onvm_ft_args_t78,3310
#define MAX_FLOW_TABLE_ENTRIES 81,3375
static onvm_ft_args_t globals 82,3421
#define MAX_SERVICE_CHAINS 92,3799
int schains[schains93,3829
int alt_port[alt_port94,3885
int max_service_chains=95,4025
struct onvm_ft_ipv4_5tuple ipv4_5tRules[ipv4_5tRules96,4051
uint32_t max_ft_entries=97,4116
static uint32_t get_ipv4_value(101,4243
parse_service_chains(133,5432
parse_ipv4_5t_rules(212,8124
setup_service_chain_for_flow_entry(277,10964
setup_schain_and_flow_entry_for_flip_key(343,13626
add_flow_key_to_sc_flow_table(429,16509
populate_random_flow_rules(517,19459
setup_flow_rule_and_sc_entries(582,22827
static int setup_flowrule_for_packet(599,23426
int init_onvm_ft_install(678,26853
int onvm_ft_handle_packet(694,27321

onvm_mgr/onvm_nf.h,477
#define _ONVM_NF_H_53,2354
#define MAX_CORES_ON_NODE 57,2410
typedef struct nfs_per_core 59,2498
        uint16_t sorted;60,2528
        uint16_t count;61,2622
        uint32_t nf_ids[nf_ids62,2703
        uint64_t run_time[run_time63,2817
}nfs_per_core_t;nfs_per_core_t64,2924
typedef struct nf_schedule_info 66,2942
        uint16_t sorted;67,2976
        nfs_per_core_t nf_list_per_core[nf_list_per_core68,3001
}nf_schedule_info_t;nf_schedule_info_t69,3061

onvm_mgr/onvm_vxlan.c,115
onvm_encapsulate_pkt(71,2893
onvm_decapsulate_pkt(158,6319
process_inner_cksums(201,7780
get_psd_sum(260,10054

onvm_mgr/onvm_special_nf0.h,37
#define _ONVM_SPECIAL_NF0_H_53,2420

onvm_mgr/onvm_vxlan.h,852
#define ONVM_VXLAN_H_51,2343
#define RTE_LOGTYPE_VXLAN 57,2432
#define IPV4_HEADER_LEN 59,2477
#define UDP_HEADER_LEN 60,2504
#define VXLAN_HEADER_LEN 61,2530
#define IP_VERSION 63,2558
#define IP_HDRLEN 64,2582
#define IP_DEFTTL 65,2660
#define IP_VHL_DEF 66,2705
#define IP_DN_FRAGMENT_FLAG 67,2749
#define VXLAN_HF_VNI 68,2784
#define DEFAULT_VXLAN_PORT 69,2816
#define VXLAN_SRC_IP 73,2961
#define VXLAN_DST_IP 74,2996
union tunnel_offload_info 77,3096
        uint64_t data;78,3124
                uint64_t l2_len:l2_len80,3164
                uint64_t l3_len:l3_len81,3231
                uint64_t l4_len:l4_len82,3297
                uint64_t tso_segsz:tso_segsz83,3358
                uint64_t outer_l2_len:outer_l2_len84,3426
                uint64_t outer_l3_len:outer_l3_len85,3498
} __rte_cache_aligned;87,3582

onvm_mgr/onvm_init.h,953
#define _ONVM_INIT_H_54,2317
#define MBUFS_PER_NF 97,3416
#define MBUFS_PER_PORT 98,3514
#define MBUF_CACHE_SIZE 99,3617
#define MBUF_OVERHEAD 100,3645
#define RX_MBUF_DATA_SIZE 101,3716
#define MBUF_SIZE 102,3747
#define NF_INFO_SIZE 104,3802
#define NF_INFO_CACHE 105,3851
#define NF_MSG_SIZE 107,3971
#define NF_MSG_CACHE_SIZE 108,4018
#define IMAGE_CACHE_SIZE 112,4115
#define IMAGE_STATE_CACHE_SIZE 113,4142
#define CLIENT_QUEUE_RING_THRESHOLD 120,4470
#define CLIENT_QUEUE_RING_THRESHOLD_GAP 121,4511
#define CLIENT_QUEUE_RING_THRESHOLD 123,4617
#define CLIENT_QUEUE_RING_THRESHOLD_GAP 124,4658
#define CLIENT_QUEUE_RING_WATER_MARK_SIZE 127,4740
#define CLIENT_QUEUE_RING_LOW_THRESHOLD 128,4848
#define CLIENT_QUEUE_RING_LOW_WATER_MARK_SIZE 129,5048
#define ECN_EWMA_ALPHA 130,5164
#define CLIENT_QUEUE_RING_ECN_MARK_SIZE 131,5195
#define NO_FLAGS 132,5368
#define DYNAMIC_CLIENTS 134,5388
#define STATIC_CLIENTS 135,5414

onvm_mgr/onvm_special_nf0.c,4237
#define ONVM_MGR_ACT_AS_2PORT_FWD_BRIDGE 74,2939
static uint8_t keep_running 80,3157
static struct onvm_nf *nf0_cl nf0_cl81,3190
inline int set_packet_forwarind_actions(86,3484
int send_direct_on_assigned_port(104,4276
int send_direct_on_alt_port(155,6822
static int onv_pkt_send_on_alt_port(208,8838
struct state_info 313,13182
        struct rte_mempool *pktmbuf_pool;pktmbuf_pool314,13202
        uint16_t nf_destination;315,13244
        uint32_t *source_ips;source_ips316,13277
        int print_flag;317,13307
struct state_info *state_info;state_info321,13394
typedef struct onvm_arp_resp_args 323,13426
        const char* ipmap_file;324,13462
        const char* ipmap_csv;325,13533
        uint32_t max_ports;326,13608
}onvm_arp_resp_args_t;onvm_arp_resp_args_t327,13687
static onvm_arp_resp_args_t arp_resp_info 328,13710
parse_port_ip_map(334,13874
send_arp_reply_v2(358,15042
int send_arp_reply(418,17308
static int try_check_and_send_arp_response(475,19512
static int onvm_special_nf_arp_responder_init(501,21278
const uint16_t MAX_SNAPLEN 526,22424
#define USE_PCAP_ROTATION_BUFFERS528,22469
#define PCAP_FILE_NAME 530,22537
#define PACP_PER_PORT_FILE_NAME 531,22581
get_pcap_file_name(533,22663
typedef struct pcap_session_meta 538,22872
        uint64_t max_capture_size;539,22907
        uint64_t max_packet_count;540,22942
        uint32_t reset_log_period_in_ms;541,22977
        const char* capture_file;544,23052
        uint8_t capture_port;545,23086
        pcap_t *pd;pd546,23116
        pcap_dumper_t *pcap_dumper;pcap_dumper547,23136
        uint8_t is_active;548,23172
        uint64_t captured_size;549,23199
        uint32_t captured_packet_count;550,23231
        onvm_time_t capture_start_time;551,23271
        onvm_time_t capture_end_time;552,23311
}pcap_session_meta_t;pcap_session_meta_t554,23350
#define MAX_PCAP_ROT_FILES 557,23379
#define PCAP_FILE_NAME 558,23411
#define PACP_PER_PORT_FILE_NAME 559,23455
get_pcap_file_name(561,23540
typedef struct pcap_log_meta{pcap_log_meta566,23771
        const char* capture_file;568,23834
        pcap_t *pd;pd569,23868
        pcap_dumper_t *pcap_dumper;pcap_dumper570,23888
        uint8_t is_active;571,23924
        uint64_t captured_size;572,23951
        uint32_t captured_packet_count;573,23983
        onvm_time_t capture_start_time;574,24023
        onvm_time_t capture_end_time;575,24063
}pcap_log_meta_t;pcap_log_meta_t577,24102
typedef struct pcap_session_meta 578,24120
        uint64_t max_capture_size;579,24155
        uint64_t max_packet_count;580,24190
        uint32_t reset_log_period_in_ms;581,24225
        uint8_t capture_port;582,24266
        uint8_t log_active_status;583,24296
        uint8_t ring_index;584,24331
        pcap_log_meta_t log[log585,24359
}pcap_session_meta_t;pcap_session_meta_t587,24409
#define PCAP_MAX_PACKET_COUNT 592,24604
#define PCAP_MAX_CAPTURE_SIZE 593,24698
#define USE_PCAP_PER_OUT_PORT594,24818
pcap_session_meta_t pcap_info 596,24878
pcap_session_meta_t pcap_infos[pcap_infos608,25388
typedef enum pcap_log_status_type 610,25445
        pcap_log_status_unused=611,25481
        pcap_log_status_active_logging=612,25515
        pcap_log_status_active_logging_stopped=613,25557
        pcap_log_status_replay_on=614,25607
        pcap_log_status_replay_finished=615,25644
}pcap_log_status_type_e;pcap_log_status_type_e616,25687
inline int onvm_util_init_pacp_logger(619,25747
inline int onvm_util_clear_pcap_log(654,27488
inline int onvm_util_log_packets(678,28433
inline const char* onvm_util_close_and_get_pdump_file(731,31390
inline int onvm_util_init_pacp_logger(757,32477
inline int onvm_util_clear_pcap_log(780,33833
inline int onvm_util_log_packets(804,35119
inline const char* onvm_util_close_and_get_pdump_file(836,36928
inline int onvm_util_replay_all_packets(852,37844
static inline int onvm_util_plain_pcap_replay(863,38180
static inline int onvm_util_plain_pcap_replay(965,43086
#define ENABLE_LOCAL_LATENCY_PROFILER977,43536
int onv_pkt_send_to_special_nf0(1037,46434
int process_special_nf0_rx_packets(1086,49108
int start_special_nf0(1204,54756
int stop_special_nf0(1255,56680

onvm_mgr/onvm_ft_install.h,36
#define _ONVM_FT_INSTALL_H_53,2425

onvm_mgr/onvm_gpu.c,489
static inline struct onvm_nf_info *shadow_nf(shadow_nf16,292
void load_all_models(27,543
void * provide_nf_with_model(112,3840
void restart_nf(133,4506
void nf_is_gpu_ready(140,4755
void compute_GPU_allocation(161,5493
float find_max_throughput(193,6819
int suggest_gpu_percentage(206,7326
void inform_NF_of_pending_restart(220,7894
void get_shadow_NF_ready(225,8064
void init_zmq(237,8626
int send_message_to_orchestrator(248,8942
zmgr_msg *create_zmsg(create_zmsg259,9311

onvm_mgr/onvm_wakemgr.h,33
#define _ONVM_WAKEMGR_H_54,2360

onvm_mgr/onvm_args.c,592
volatile uint16_t num_nfs 60,2498
uint16_t num_services 63,2596
uint16_t default_service 66,2698
uint8_t is_static_clients;69,2799
ONVM_STATS_OUTPUT stats_destination 72,2887
uint16_t global_stats_sleep_time 75,3026
uint8_t global_verbosity_level 78,3148
static const char *progname;progname81,3219
#define USE_STATIC_IDS102,3541
parse_app_args(121,3908
usage(209,7437
parse_portmask(226,8301
parse_default_service(261,9359
parse_num_services(275,9661
parse_stats_sleep_time(288,9956
parse_stats_output(301,10266
parse_verbosity_level(317,10813
parse_num_clients(331,11155

onvm_mgr/onvm_zk_common.c,164
onvm_zk_create_if_not_exists(54,2347
onvm_zk_create_or_update(72,3009
zk_state_to_string(85,3443
zk_event_type_to_string(103,4029
zk_status_to_string(121,4599

onvm_mgr/onvm_zookeeper.h,764
#define ONVM_ZOOKEEPER_H_52,2339
#define ZK_SERVER 62,2539
#define ZK_CONNECT_ASYNC 64,2576
#define ZK_CONNECT_BLOCKING 65,2603
#define MGR_NODE_BASE 67,2634
#define MGR_NODE_FMT 68,2667
#define MGR_NODE_STR_FMT 69,2708
#define SERVICE_NODE_BASE 71,2748
#define SERVICE_NODE_FMT 72,2785
#define SERVICE_INSTANCE_FMT 73,2866
#define SERVICE_COUNT_FMT 74,2963
#define NF_NODE_BASE 76,3001
#define NF_SERVICE_BASE 77,3028
#define NF_STAT_CHILD_FMT 78,3103
#define NF_INSTANCE_FMT 79,3191
#define NF_STAT_FMT 80,3294
#define ZK_STAT_UPDATE_FREQ 81,3366
#define SCALE_QUEUE_BASE 82,3445
#define SCALE_QUEUE_FMT 83,3479
#define SCALE_DATA_FMT 84,3559
#define MAC_ADDR_FMT 86,3593
#define SCALE_RX_USE_MAX 87,3634
#define SCALE_TIMEOUT_SEC 88,3664

onvm_mgr/onvm_rsync.h,1821
#define _ONVM_RSYNC_H_53,2414
typedef struct rsync_stats 57,2569
        uint64_t tx_state_sync_pkt_counter;60,2700
        uint64_t nf_state_sync_pkt_counter[nf_state_sync_pkt_counter61,2744
        uint64_t tx_state_sync_in_pkt_counter;62,2797
        uint64_t nf_state_sync_in_pkt_counter[nf_state_sync_in_pkt_counter63,2844
        uint64_t transactions_out_counter;64,2900
        uint64_t transactions_in_counter;65,2943
        uint64_t enq_coun_tx_tx_state_latch_ring[enq_coun_tx_tx_state_latch_ring68,3093
        uint64_t drop_count_tx_tx_state_latch_ring[drop_count_tx_tx_state_latch_ring69,3161
        uint64_t enq_count_tx_nf_state_latch_ring[enq_count_tx_nf_state_latch_ring71,3232
        uint64_t drop_count_tx_nf_state_latch_ring[drop_count_tx_nf_state_latch_ring72,3301
        uint64_t enq_coun_tx_tx_state_latch_db_ring[enq_coun_tx_tx_state_latch_db_ring77,3525
        uint64_t drop_count_tx_tx_state_latch_db_ring[drop_count_tx_tx_state_latch_db_ring78,3626
        uint64_t enq_count_tx_nf_state_latch_db_ring[enq_count_tx_nf_state_latch_db_ring80,3730
        uint64_t drop_count_tx_nf_state_latch_db_ring[drop_count_tx_nf_state_latch_db_ring81,3832
        uint64_t enq_coun_tx_tx_state_latch_db_ring[enq_coun_tx_tx_state_latch_db_ring83,3941
        uint64_t drop_count_tx_tx_state_latch_db_ring[drop_count_tx_tx_state_latch_db_ring84,4012
        uint64_t enq_count_tx_nf_state_latch_db_ring[enq_count_tx_nf_state_latch_db_ring86,4086
        uint64_t drop_count_tx_nf_state_latch_db_ring[drop_count_tx_nf_state_latch_db_ring87,4158
        uint64_t enq_count_tx_port_ring[enq_count_tx_port_ring91,4246
        uint64_t drop_count_tx_port_ring[drop_count_tx_port_ring92,4305
}rsync_stats_t;rsync_stats_t94,4366
#define CHECK_IF_ANY_ONE_BIT_SET(98,4523

onvm_mgr/onvm_rsync.c,6259
#define NF_CHECKPOINT_PERIOD_IN_US 64,2776
#define TX_TS_CHECKPOINT_PERIOD_IN_US 65,2966
#define RSYNC_OUT_PORT 69,3425
#define RSYNC_USE_DPDK_TIMER72,3498
volatile uint8_t rx_halt 73,3527
#undef TX_TS_CHECKPOINT_PERIOD_IN_US76,3593
#define TX_TS_CHECKPOINT_PERIOD_IN_US 77,3630
#undef NF_CHECKPOINT_PERIOD_IN_US79,3684
#define NF_CHECKPOINT_PERIOD_IN_US 80,3718
#define MAX_PACKETS_IN_AVG_RTT_AT_HIGH_ARRV_RATE 89,4161
#define MAX_PACKETS_IN_A_ROUND 91,4356
#define MAX_PACKETS_IN_A_ROUND 93,4598
#define PACKET_READ_SIZE_LARGE 96,4860
#define CHECK_FOR_COMMIT_WITH_WAIT 99,5093
#define CHECK_FOR_COMMIT_WITH_NO_WAIT 100,5132
#define MAX_RSYNC_TRANSACTIONS 101,5174
#define REMOTE_SYNC_WAIT_INTERVAL 102,5247
#define MAX_TRANS_COMMIT_WAIT_COUNTER 103,5368
#define MAX_WAIT_TIME_FOR_TRANSACTION_COMMIT 104,5498
#define ENABLE_EXTRA_RSYNC_PRINT_MSGS108,5700
struct rte_timer tx_ts_checkpoint_timer;111,5746
struct rte_timer nf_status_checkpoint_timer;112,5787
#define NEED_REMOTE_TS_TABLE_SYNC 115,5899
#define NEED_REMOTE_NF_STATE_SYNC 116,5942
#define TX_TS_LATCH_BUFFER_FULL 117,5985
#define NF_STATE_LATCH_BUFFER_FULL 118,6028
static dirty_mon_state_map_tbl_txts_t *dirty_state_map_tx_ts dirty_state_map_tx_ts122,6142
static dirty_mon_state_map_tbl_t *dirty_state_map_tx_ts dirty_state_map_tx_ts124,6217
static onvm_per_flow_ts_info_t   *tx_ts_table tx_ts_table126,6328
static dirty_mon_state_map_tbl_txts_t *dirty_state_map_tx_ts_db[dirty_state_map_tx_ts_db131,6504
static dirty_mon_state_map_tbl_t *dirty_state_map_tx_ts_db[dirty_state_map_tx_ts_db133,6605
static onvm_per_flow_ts_info_t   *tx_ts_table_db[tx_ts_table_db135,6742
static dirty_mon_state_map_tbl_txts_t *dirty_state_map_tx_ts_db dirty_state_map_tx_ts_db138,6866
static dirty_mon_state_map_tbl_t *dirty_state_map_tx_ts_db dirty_state_map_tx_ts_db140,6944
static onvm_per_flow_ts_info_t   *tx_ts_table_db tx_ts_table_db142,7058
#define DIRTY_MAP_PER_CHUNK_SIZE 149,7175
#define TXTS_DIRTY_MAP_CHUNK_SIZE 152,7319
#define MAX_TX_TS_ENTRIES 154,7440
#define TXTS_ENTRIES_PER_CHUNK 155,7554
#define MAX_TX_TS_ENTRIES 157,7688
#define TXTS_ENTRIES_PER_CHUNK 158,7797
typedef struct remote_node_config 161,7886
        uint8_t mac_addr_bytes[mac_addr_bytes162,7922
        uint32_t ip_addr;163,7970
}remote_node_config_t;remote_node_config_t164,7996
static remote_node_config_t rsync_node_info 165,8019
#define STATE_TYPE_TX_TS_TABLE 170,8182
#define STATE_TYPE_NF_MEMPOOL 171,8221
#define STATE_TYPE_SVC_MEMPOOL 172,8260
#define MSG_START_OF_REPLAY 173,8299
#define MSG_END_OF_REPLAY 174,8338
#define STATE_REQ_TO_RSP_LSH 175,8377
#define STATE_TYPE_TX_TS_ACK 176,8413
#define STATE_TYPE_NF_MEM_ACK 177,8506
#define STATE_TYPE_SVC_MEM_ACK 178,8599
#define STATE_TYPE_REQ_MASK 179,8693
#define STATE_TYPE_RSP_MASK 180,8732
#define MAX_STATE_SIZE_PER_PACKET 182,8772
typedef struct state_tx_meta 183,8815
        uint8_t state_type;184,8846
        uint8_t trans_id;185,8914
        uint8_t flags;186,8977
        uint8_t nf_or_svc_id;187,9075
        uint32_t start_offset;188,9155
} __attribute__((__packed__)) state_tx_meta_t;190,9299
#define STATE_FLAG_LAST_PACKET_MARKER 191,9346
typedef struct state_transfer_packet_hdr 193,9394
        state_tx_meta_t meta;194,9437
        uint8_t data[data195,9467
} __attribute__((__packed__)) state_transfer_packet_hdr_t;196,9516
typedef struct transfer_ack_packet_hdr 198,9576
        state_tx_meta_t meta;199,9617
} __attribute__((__packed__)) transfer_ack_packet_hdr_t;200,9647
rsync_stats_t rsync_stat;205,9821
uint8_t replay_mode;208,9922
static volatile uint8_t trans_queue[trans_queue211,9995
static onvm_time_t trans_ts[trans_ts212,10056
static uint8_t trans_notify[trans_notify214,10163
static inline void notify_ndsync_commit_to_blocked_NFs(243,11830
static int print_trans_status(269,13271
static int get_transaction_id(280,13531
static uint8_t log_transaction_id(296,14054
static uint8_t clear_transaction_id 313,14647
static uint8_t check_and_clear_elapsed_transactions(330,15193
static int rsync_wait_for_commit_ack(357,16809
static int rsync_wait_for_commit_acks(385,17814
tx_ts_checkpoint_timer_cb(441,19978
nf_status_checkpoint_timer_cb(447,20176
static inline int initialize_rsync_timers(475,21084
static void bswap_rsync_hdr_data(494,22078
inline int rsync_print_rsp_packet(509,22662
static struct rte_mbuf* craft_state_update_packet(520,23289
static int rsync_tx_ts_state_to_remote(564,25203
static int rsync_nf_state_to_remote(637,28913
static int rsync_tx_ts_state_from_remote(803,40148
static int rsync_nf_state_from_remote(823,41189
#define ENABLE_REPLAY_LATENCY_PROFILER837,42103
static onvm_interval_timer_t ts;839,42180
static int rsycn_handle_start_of_replay(841,42220
static int rsycn_handle_end_of_replay(850,42714
static inline uint64_t tx_ts_map_tag_index_to_dirty_chunk_bit_index(862,43366
static inline void tx_ts_update_dirty_state_index(871,43956
static inline int update_flow_tx_ts_table(903,45186
static inline int initialize_tx_ts_table(941,47259
static inline int send_packets_out(986,49361
static inline int log_transaction_and_send_packets_out(1023,50690
int transmit_tx_port_packets(1028,51059
static int transmit_tx_tx_state_latch_rings(1075,53251
static int transmit_tx_nf_state_latch_rings(1120,55329
static inline int get_flow_entry_index(1162,57124
static int extract_and_parse_tx_port_packets(1186,58283
static inline int rsync_process_req_packet(1338,66652
static inline int rsync_process_rsp_packet(1392,69292
int rsync_process_rsync_in_pkts(1411,70351
#define MAX_EXTRACT_AND_PARSE_LOOP_COUNTER 1446,72409
#define MAX_EXTRACT_AND_PARSE_LOOP_COUNTER 1448,72462
static int rsync_start_simple_pico_nf(1454,72654
static int rsync_start_simple_pico(1499,74721
static int rsync_start_simple(1538,76167
int rsync_start_only_db(1600,79015
static int rsync_start_simple_multi_db(1659,81667
static inline int rsync_start_simple_multi_db(1765,87144
static int rsync_start_simple_db(1916,94323
static int rsync_start_optimal_db(1999,98780
inline int rsync_start(2090,103971
int onvm_print_rsync_stats(2121,104763
int notify_replay_mode(2176,110478
rsync_main(2186,110931

onvm_mgr/onvm_zk_common.h,66
#define ONVM_ZK_COMMON_H_52,2340
#define RTE_LOGTYPE_ZK 56,2401

onvm_mgr/onvm_stats.h,1430
#define _ONVM_STATS_H_52,2320
#define ONVM_STR_STATS_STDOUT 60,2426
#define ONVM_STR_STATS_STDERR 61,2465
#define ONVM_STR_STATS_WEB 62,2504
#define ONVM_STATS_FOPEN_ARGS 64,2538
#define ONVM_STATS_PATH_BASE 65,2573
#define ONVM_JSON_STATS_FILE 66,2617
#define ONVM_STATS_FILE 67,2690
#define ONVM_JSON_PORT_STATS_KEY 69,2753
#define ONVM_JSON_NF_STATS_KEY 70,2804
#define ONVM_JSON_TIMESTAMP_KEY 71,2851
#define ONVM_SNPRINTF(73,2899
#define ONVM_RAW_STATS_DUMP 82,3494
        ONVM_STATS_NONE 85,3540
        ONVM_STATS_STDOUT,86,3569
        ONVM_STATS_STDERR,87,3596
        ONVM_STATS_WEB88,3623
} ONVM_STATS_OUTPUT;89,3646
cJSON* onvm_json_root;91,3668
cJSON* onvm_json_port_stats_arr;92,3691
cJSON* onvm_json_nf_stats_arr;93,3724
cJSON* onvm_json_port_stats[onvm_json_port_stats94,3755
cJSON* onvm_json_nf_stats[onvm_json_nf_stats95,3802
typedef struct onvm_stats_snapshot 98,3919
        uint64_t rx_delta;99,3956
        uint64_t tx_delta;100,4026
        uint64_t rx_drop_delta;101,4096
        uint64_t tx_drop_delta;102,4164
        uint32_t arrival_rate;103,4232
        uint32_t rx_rate;104,4306
        uint32_t serv_rate;105,4365
        uint32_t tx_rate;106,4424
        uint32_t rx_drop_rate;107,4498
        uint32_t tx_drop_rate;108,4564
}onvm_stats_snapshot_t;onvm_stats_snapshot_t109,4630
#define onvm_stats_clear_all_nfs 171,6443
#define onvm_stats_clear_nf(181,6662

onvm_mgr/onvm_zk_watch.c,25
onvm_zk_watcher(59,2461

lib/cJSON.c,3461
    #define INTEGER_SIZE 38,1403
    #define INTEGER_SIZE 41,1481
    #define INTEGER_SIZE 44,1568
typedef int cjbool;50,1704
#define true 51,1724
#define false 52,1749
static const char *global_ep global_ep54,1776
const char *cJSON_GetErrorPtr(cJSON_GetErrorPtr56,1814
extern const char* cJSON_Version(61,1877
static int cJSON_strcasecmp(70,2098
static char* cJSON_strdup(94,2643
void cJSON_InitHooks(114,2940
static cJSON *cJSON_New_Item(cJSON_New_Item129,3269
void cJSON_Delete(141,3483
static const char *parse_number(parse_number165,4063
static int pow2gt 235,5527
    char *buffer;buffer257,5864
    int length;258,5882
    int offset;259,5898
    cjbool noalloc;260,5914
} printbuffer;261,5934
static char* ensure(264,6026
static int update(304,6808
static char *print_number(print_number317,7067
static unsigned parse_hex4(392,8774
static const unsigned char firstByteMark[firstByteMark478,10336
static const char *parse_string(parse_string490,10616
static char *print_string_ptr(print_string_ptr668,16259
static char *print_string(print_string814,19465
static const char *skip(skip828,20158
cJSON *cJSON_ParseWithOpts(cJSON_ParseWithOpts839,20352
cJSON *cJSON_Parse(cJSON_Parse879,21321
char *cJSON_Print(cJSON_Print885,21461
char *cJSON_PrintUnformatted(cJSON_PrintUnformatted890,21542
char *cJSON_PrintBuffered(cJSON_PrintBuffered895,21634
int cJSON_PrintPreallocated(910,21939
static const char *parse_value(parse_value921,22241
static char *print_value(print_value969,23247
static const char *parse_array(parse_array1072,26053
static char *print_array(print_array1139,27448
static const char *parse_object(parse_object1308,31275
static char *print_object(print_object1403,33298
int    cJSON_GetArraySize(1684,39643
cJSON *cJSON_GetArrayItem(cJSON_GetArrayItem1696,39811
cJSON *cJSON_GetObjectItem(cJSON_GetObjectItem1708,40006
cjbool cJSON_HasObjectItem(1718,40225
static void suffix_object(1724,40392
static cJSON *create_reference(create_reference1731,40534
void   cJSON_AddItemToArray(1746,40851
void   cJSON_AddItemToObject(1769,41233
void   cJSON_AddItemToObjectCS(1787,41606
void cJSON_AddItemReferenceToArray(1805,42053
void cJSON_AddItemReferenceToObject(1810,42177
cJSON *cJSON_DetachItemFromArray(cJSON_DetachItemFromArray1815,42333
void cJSON_DeleteItemFromArray(1847,42925
cJSON *cJSON_DetachItemFromObject(cJSON_DetachItemFromObject1852,43045
void cJSON_DeleteItemFromObject(1869,43356
void cJSON_InsertItemInArray(1875,43538
void cJSON_ReplaceItemInArray(1901,44013
void cJSON_ReplaceItemInObject(1931,44551
cJSON *cJSON_CreateNull(cJSON_CreateNull1954,45112
cJSON *cJSON_CreateTrue(cJSON_CreateTrue1965,45259
cJSON *cJSON_CreateFalse(cJSON_CreateFalse1976,45406
cJSON *cJSON_CreateBool(cJSON_CreateBool1987,45555
cJSON *cJSON_CreateNumber(cJSON_CreateNumber1998,45724
cJSON *cJSON_CreateString(cJSON_CreateString2011,45949
extern cJSON *cJSON_CreateRaw(cJSON_CreateRaw2028,46272
cJSON *cJSON_CreateArray(cJSON_CreateArray2045,46590
cJSON *cJSON_CreateObject(cJSON_CreateObject2056,46737
cJSON *cJSON_CreateIntArray(cJSON_CreateIntArray2068,46910
cJSON *cJSON_CreateFloatArray(cJSON_CreateFloatArray2096,47408
cJSON *cJSON_CreateDoubleArray(cJSON_CreateDoubleArray2124,47909
cJSON *cJSON_CreateStringArray(cJSON_CreateStringArray2152,48411
cJSON *cJSON_Duplicate(cJSON_Duplicate2181,48931
void cJSON_Minify(2254,50745

lib/cJSON.h,1289
#define cJSON__h24,1111
#define CJSON_VERSION_MAJOR 32,1191
#define CJSON_VERSION_MINOR 33,1221
#define CJSON_VERSION_PATCH 34,1251
#define cJSON_False 42,1410
#define cJSON_True 43,1440
#define cJSON_NULL 44,1470
#define cJSON_Number 45,1500
#define cJSON_String 46,1530
#define cJSON_Array 47,1560
#define cJSON_Object 48,1590
#define cJSON_Raw 49,1620
#define cJSON_IsReference 51,1666
#define cJSON_StringIsConst 52,1696
typedef struct cJSON55,1756
    struct cJSON *next;next58,1897
    struct cJSON *prev;prev59,1921
    struct cJSON *child;child61,2059
    int type;64,2127
    char *valuestring;valuestring67,2216
    int valueint;69,2290
    double valuedouble;71,2359
    char *string;string74,2492
} cJSON;75,2510
typedef struct cJSON_Hooks77,2520
      void *(*malloc_fn)malloc_fn79,2549
      void (*free_fn)free_fn80,2586
} cJSON_Hooks;81,2620
#define cJSON_AddNullToObject(163,7722
#define cJSON_AddTrueToObject(164,7821
#define cJSON_AddFalseToObject(165,7920
#define cJSON_AddBoolToObject(166,8021
#define cJSON_AddNumberToObject(167,8123
#define cJSON_AddStringToObject(168,8229
#define cJSON_AddRawToObject(169,8335
#define cJSON_SetIntValue(172,8521
#define cJSON_SetNumberValue(173,8631
#define cJSON_ArrayForEach(176,8785

onvm_nflib/onvm_flow_table.h,989
#define _ONVM_FLOW_TABLE_H_42,1996
#define DEFAULT_HASH_FUNC 58,2330
#define DEFAULT_HASH_FUNC 61,2404
struct onvm_ft 64,2454
        struct rte_hash* hash;65,2471
        char* data;66,2502
        int cnt;67,2522
        int entry_size;68,2539
struct onvm_ft_ipv4_5tuple 71,2567
        uint32_t src_addr;72,2596
        uint32_t dst_addr;73,2623
        uint16_t src_port;74,2650
        uint16_t dst_port;75,2677
        uint8_t  proto;76,2704
union ipv4_5tuple_host 82,2903
                uint8_t  pad0;84,2945
                uint8_t  proto;85,2976
                uint16_t virt_port;86,3008
                uint32_t ip_src;87,3044
                uint32_t ip_dst;88,3077
                uint16_t port_src;89,3110
                uint16_t port_dst;90,3145
        __m128i xmm;92,3191
_onvm_ft_print_key(128,4115
onvm_ft_get_data(139,4692
onvm_ft_fill_key(144,4824
onvm_ft_fill_key_symmetric(173,5865
onvm_ft_ipv4_hash_crc(195,6529
onvm_softrss(222,7434

onvm_nflib/onvm_comm_utils.h,1119
#define _ONVM_COMM_UTILS_H_42,2043
#define HAS_CLOCK_GETTIME_MONOTONIC65,2665
#define USE_THIS_CLOCK 67,2708
typedef struct onvm_time_s 69,2907
  struct timespec t;71,2971
  struct timeval t;73,2998
} __rte_cache_aligned onvm_time_t;75,3025
typedef struct onvm_interval_timer_s 77,3061
        onvm_time_t ts;78,3100
        onvm_time_t tp;79,3124
} __rte_cache_aligned onvm_interval_timer_t;80,3148
#define SECOND_TO_MICRO_SECOND 95,3605
#define NANO_SECOND_TO_MICRO_SECOND(96,3657
#define MICRO_SECOND_TO_SECOND(97,3718
typedef struct stats_time_info 99,3910
        uint8_t in_read;100,3943
        onvm_time_t prev_time;101,3968
        onvm_time_t cur_time;102,3999
} __rte_cache_aligned nf_stats_time_info_t;103,4029
typedef struct stats_cycle_info 106,4098
        uint8_t in_read;107,4132
        uint64_t prev_cycles;108,4157
        uint64_t cur_cycles;109,4187
} __rte_cache_aligned stats_cycle_info_t;110,4216
#define TS_TYPE_LOGICAL 124,4680
#define TS_TYPE_SYS_CLOCK 126,4762
#define TS_TYPE_CPU_CYCLES 128,4855
#define TS_RX_PACKET_RATE 130,4888
#define USE_TS_TYPE 131,4960

onvm_nflib/onvm_pkt_helper.h,611
#define _ONVM_PKT_HELPER_H_42,1998
#define IP_PROTOCOL_TCP 53,2160
#define IP_PROTOCOL_UDP 54,2186
#define TCP_FLAGS57,2232
#define TCP_FLAG_FIN 58,2250
#define TCP_FLAG_SYN 59,2278
#define TCP_FLAG_RST 60,2306
#define TCP_FLAG_PSH 61,2334
#define TCP_FLAG_ACK 62,2362
#define TCP_FLAG_URG 63,2390
#define TCP_FLAG_ECE 65,2425
#define TCP_FLAG_CWR 66,2453
#define TCP_FLAG_NS 67,2481
#define SUPPORTS_IPV4_CHECKSUM_OFFLOAD 69,2510
#define SUPPORTS_TCP_CHECKSUM_OFFLOAD 70,2556
#define SUPPORTS_UDP_CHECKSUM_OFFLOAD 71,2601
#define ONVM_PKT_GET_FLAGS(74,2692
#define ONVM_PKT_SET_FLAGS(80,2898

onvm_nflib/onvm_images.h,1488
#define _ONVM_IMAGES_H2,23
#define NUM_IN_PKTS 4,47
#define NUM_SIZE 5,70
#define IMAGE_NUM_ELE 6,106
#define IMAGE_SIZE 7,138
#define NUM_OF_PKTS 8,169
#define IMAGE_BATCH 9,223
#define IMAGENET_OUTPUT_SIZE 10,245
#define NF_IMAGE_STATS_PERIOD_MS 11,279
#define NF_INFERENCE_PERIOD 12,340
typedef enum data_status{data_status17,422
typedef enum data_status{empty,empty17,422
typedef enum data_status{empty, occupied,17,422
typedef enum data_status{empty, occupied, ready}ready17,422
typedef enum data_status{empty, occupied, ready} data_status;17,422
typedef struct data_struct{data_struct18,597
  int file_id;19,625
  int position;20,640
  int number_of_elements;21,656
  float data_array[data_array22,682
}data_struct;data_struct23,715
typedef struct image_data{image_data30,853
  int image_id;31,880
  void ** img_data_ptrs;32,896
  int batch_size;33,921
  float image_data_arr[image_data_arr34,969
  float output[output35,1099
  float stats[stats36,1203
  struct timespec timestamps[timestamps37,1282
  int num_data_points_stored;38,1491
  data_status status;39,1613
} image_data;40,1734
  struct gpu_callback{gpu_callback43,1794
    struct onvm_nf_info *nf_info;nf_info44,1817
    struct image_data *ready_image;ready_image45,1851
int gpu_finish_work_flag;50,1952
int * gpu_queue_image_id;68,2693
struct gpu_callback *gpu_callbacks;gpu_callbacks70,2837
int num_elements_in_gpu_queue;71,2873
int gpu_queue_current_index;72,2904

onvm_nflib/onvm_nflib_internal.h,2132
#define _ONVM_NFLIB_INTERNAL_H_53,2288
#define NF_PKT_BATCH_SIZE 83,3084
#define RTDSC_CYCLE_COST 86,3222
#define ENABLE_TIMER_BASED_NF_CYCLE_COMPUTATION96,3663
#define ENABLE_STATIC_ID 99,3775
#define ENABLE_LOCAL_LATENCY_PROFILER 102,3920
#define NF_STATS_PERIOD_IN_MS 111,4287
#define MEMCPY_SIZE 116,4429
#define TEST_MEMCPY_MODE_PER_PACKET117,4462
#define TEST_MEMCPY_MODE_PER_BATCH119,4534
struct port_info *ports;ports125,4758
static struct rte_ring *mgr_msg_ring;mgr_msg_ring128,4825
static struct rte_ring *nf_msg_ring;nf_msg_ring131,4900
static struct rte_ring *tx_ring,tx_ring134,4992
static struct rte_ring *tx_ring, *rx_ring;rx_ring134,4992
static struct rte_ring *tx_sring,tx_sring137,5069
static struct rte_ring *tx_sring, *rx_sring;rx_sring137,5069
static struct rte_ring *mgr_rsp_ring;mgr_rsp_ring142,5203
struct onvm_nf *nfs nfs146,5304
struct onvm_nf *this_nf this_nf147,5367
uint16_t **services;services150,5514
uint16_t *nf_per_service_count;nf_per_service_count151,5535
static struct rte_mempool *nf_info_mp;nf_info_mp157,5669
static struct rte_mempool *nf_msg_pool;nf_msg_pool160,5749
static struct rte_mempool *pktmbuf_pool;pktmbuf_pool163,5817
static struct rte_mempool *nf_image_pool;nf_image_pool167,5904
static uint16_t initial_instance_id 171,6012
static uint16_t service_id 175,6090
static uint8_t keep_running 179,6182
struct onvm_service_chain *default_chain;default_chain184,6268
uint64_t counter 189,6397
static rte_atomic16_t * flag_p;194,6702
static sem_t *mutex;mutex199,6820
struct rte_timer stats_timer;204,6939
onvm_interval_timer_t ts,208,7056
onvm_interval_timer_t ts, g_ts;208,7056
void *base_memory base_memory212,7156
pkt_handler_func pkt_hdl_func 217,7311
callback_handler_func cb_func 218,7349
#define ONVM_NO_CALLBACK 219,7387
#define YEILD_DUE_TO_EXPLICIT_REQ 286,8853
#define YIELD_DUE_TO_EMPTY_RX_RING 287,8893
#define YIELD_DUE_TO_FULL_TX_RING 288,8933
void *pReplicaStateMempool pReplicaStateMempool303,9403
dirty_mon_state_map_tbl_t *dirty_state_map dirty_state_map312,9704
uint8_t SV_ACCES_PER_PACKET;316,9896

onvm_nflib/histogram.h,1677
#define _HISTOGRAM_H_ 3,23
#define HIST_BUCKETS 6,127
#define HIST_RATE_MAX_VAL 8,153
#define HIST_COST_MAX_VAL 10,190
struct histogram 12,222
        uint32_t data[data14,242
        uint32_t bucket_size;15,279
        uint32_t max;16,309
        uint32_t min;17,367
        uint32_t max_val;19,425
        uint32_t min_val;20,494
        uint32_t total_count;22,562
        uint32_t running_avg;23,663
typedef struct histogram histogram_t;25,757
#define MAX_HISTOGRAM_SAMPLES 36,1179
#define MIN_SAMPLES_FOR_HISTOGRAM 37,1215
#define DISCARD_INITIAL_SAMPLES_COUNT 38,1254
typedef struct histogram_v2 41,1400
        uint32_t val[val42,1430
        uint32_t cur_index;43,1491
        uint32_t min_val;44,1554
        uint32_t max_val;45,1611
        uint32_t running_avg;46,1668
        uint32_t ewma_avg;47,1759
        histogram_t histogram;49,1815
        uint8_t is_initialized;50,1866
        uint32_t mean_val;51,1948
        uint32_t median_val;52,1996
        uint32_t mode_val;53,2046
        uint32_t perctl_val;54,2094
        uint32_t discard_mode;55,2145
}histogram_v2_t;histogram_v2_t57,2232
typedef enum HIST_VAL_TYPE 58,2249
        VAL_TYPE_RUNNING_AVG 59,2278
        VAL_TYPE_MEAN 60,2311
        VAL_TYPE_MEDIAN 61,2337
        VAL_TYPE_MODE 62,2365
        VAL_TYPE_ABS_MIN 63,2391
        VAL_TYPE_ABS_MAX 64,2421
        VAL_TYPE_25_PERCENTILE=65,2450
        VAL_TYPE_50_PERCENTILE=66,2484
        VAL_TYPE_50_PERCENTILE=VAL_TYPE_MEDIAN,66,2484
        VAL_TYPE_75_PERCENTILE=67,2532
        VAL_TYPE_90_PERCENTILE=68,2566
        VAL_TYPE_99_PERCENTILE=69,2600
}HIST_VAL_TYPE_E;HIST_VAL_TYPE_E70,2634

onvm_nflib/onvm_pkt_helper.c,991
onvm_pkt_mac_addr_swap(59,2270
onvm_pkt_set_mac_addr(87,2906
onvm_pkt_swap_src_mac_addr(110,3597
onvm_pkt_swap_dst_mac_addr(137,4331
onvm_pkt_ether_hdr(164,5075
onvm_pkt_tcp_hdr(172,5271
onvm_pkt_udp_hdr(188,5810
onvm_pkt_ipv4_hdr(204,6350
onvm_pkt_vlan_hdr(225,7314
onvm_pkt_is_tcp(237,7680
onvm_pkt_is_udp(242,7773
onvm_pkt_is_ipv4(247,7866
onvm_pkt_print(253,7963
onvm_pkt_print_tcp(271,8419
onvm_pkt_print_udp(302,9905
onvm_pkt_print_ipv4(310,10200
void onvm_pkt_print_ether(345,11903
onvm_pkt_parse_ip(391,13747
onvm_pkt_parse_mac(408,14132
onvm_pkt_get_checksum_offload_flags(428,14624
calculate_tcpudp_cksum(452,15476
                uint32_t saddr;458,15725
                uint32_t daddr;459,15757
                uint8_t reserved;460,15789
                uint8_t protocol;461,15839
                uint16_t total_length;462,15873
calculate_ip_cksum(488,16628
onvm_pkt_set_checksums(494,16810
onvm_tcp_con_close(542,18901
onvm_tcp_ack_close(554,19231

onvm_nflib/onvm_nflib.c,3001
#define NF_MODE_UNKNOWN 77,2859
#define NF_MODE_SINGLE 78,2885
#define NF_MODE_RING 79,2910
#define ONVM_NO_CALLBACK 81,2934
#define ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT84,2966
#define __DEBUG__NDSYNC_LOGS__85,3021
onvm_interval_timer_t nd_ts;89,3137
int64_t max_nd,90,3166
int64_t max_nd, min_nd,90,3166
int64_t max_nd, min_nd, avg_nd,90,3166
int64_t max_nd, min_nd, avg_nd, delta_nd;90,3166
static inline void allocate_base_memory(98,3467
static inline void do_memcopy(101,3564
nf_explicit_callback_function nf_ecb 109,3843
static uint8_t need_ecb 110,3888
void register_explicit_callback_function(111,3917
gpu_message_processing_func nf_gpu_func;124,4459
void register_gpu_msg_handling_function(125,4500
uint32_t get_nf_core_id(147,5109
int set_cgroup_cpu_share(151,5175
void init_cgroup_info(167,5899
typedef struct pal_packet 197,7205
        uint64_t pal_counter;198,7233
        uint64_t pal_info;199,7263
}pal_packet_t;pal_packet_t200,7290
static inline int send_packets_out(201,7305
int generate_and_transmit_pals_for_batch(221,8241
stats_timer_cb(297,12047
init_nflib_timers(310,12540
void onvm_nf_yeild(327,13303
static inline void  onvm_nf_wake_notify(361,14410
static inline void onvm_nflib_implicit_wakeup(370,14692
static inline void start_ppkt_processing_cost(378,14931
static inline void end_ppkt_processing_cost(383,15171
onvm_nflib_wait_till_notification(414,16625
static inline void onvm_nflib_check_and_wait_if_interrupted(433,17583
static inline void onvm_nflib_handle_tx_shadow_ring(450,18486
static inline void synchronize_replica_nf_state_memory(482,20174
static inline void update_processed_packet_ts(526,22189
static inline int onvm_nflib_fetch_packets(551,23471
inline int onvm_nflib_post_process_packets_batch(586,25156
static inline int onvm_nflib_process_packets_batch(684,30687
onvm_nflib_run_callback(776,34201
onvm_nflib_run(843,36688
onvm_nflib_return_pkt(849,36845
onvm_nflib_return_pkt_bulk(866,37401
onvm_nflib_stop(881,38005
onvm_nflib_init(886,38125
onvm_nflib_drop_pkt(1029,43312
void notify_for_ecb(1035,43442
onvm_nflib_handle_msg(1046,43642
onvm_nflib_dequeue_messages(1118,46789
onvm_nflib_info_init(1130,47310
onvm_nflib_usage(1179,49026
onvm_nflib_parse_args(1189,49242
onvm_nflib_handle_signal(1233,50796
onvm_nflib_cleanup(1245,51095
onvm_nflib_notify_ready(1286,52788
static void get_image_state_mempool(1362,55782
void onvm_send_gpu_msg_to_mgr(1394,56960
void load_ml_file(1413,57585
void evaluate_the_image(1440,58489
void evaluate_an_image_from_mempool(1447,58878
void CUDART_CB gpu_image_callback_function(1492,61295
static int get_image_index(1550,63490
static image_data *get_image(get_image1561,63702
 static void delete_image(1582,64444
void copy_data_to_image(1592,64792
void initialize_ml_timers(1614,65899
void compute_ml_stats(1636,66721
onvm_nflib_start_nf(1652,67351
static void set_cpu_sched_policy_and_mode(1736,71256
init_shared_cpu_info(1747,71537

onvm_nflib/onvm_comm_utils.c,1169
  struct timespec start,52,2273
  struct timespec start, stop;52,2273
  struct timespec gstart,53,2304
  struct timespec gstart, gstop;53,2304
  struct timeval start,55,2343
  struct timeval start, stop;55,2343
  struct timeval gstart,56,2373
  struct timeval gstart, gstop;56,2373
inline int onvm_util_get_cur_time(60,2414
inline int onvm_util_get_start_time(76,2817
inline int onvm_util_get_stop_time(91,3217
inline int64_t onvm_util_get_elapsed_time(106,3616
inline int64_t onvm_util_get_diff_time_now(118,4066
inline unsigned long onvm_util_get_difftime_us(131,4503
uint64_t onvm_util_get_current_cpu_cycles(143,4944
uint64_t onvm_util_get_diff_cpu_cycles(148,5043
uint64_t onvm_util_get_diff_cpu_cycles_in_us(156,5229
uint64_t onvm_util_get_elapsed_cpu_cycles(164,5465
uint64_t onvm_util_get_elapsed_cpu_cycles_in_us(169,5627
uint64_t gPkts=174,5828
#define USE_DISTINCT_FIELDS177,5892
int onvm_util_mark_timestamp_on_RX_packets(180,5937
    uint64_t total_cycles;206,6850
    uint64_t total_pkts;207,6877
} latency_numbers;208,6902
int onvm_util_calc_chain_processing_latency(210,6931
int onvm_util_get_marked_packet_timestamp(268,9253

onvm_nflib/onvm_sort.h,709
#define _ONVM_SORT_H_3,23
typedef enum ONVM_SORT_DATA_TYPE 6,126
        ONVM_SORT_TYPE_INT 7,161
        ONVM_SORT_TYPE_UINT32 8,193
        ONVM_SORT_TYPE_UINT64 9,228
        ONVM_SORT_TYPE_CUSTOM 10,263
}ONVM_SORT_DATA_TYPE_E;ONVM_SORT_DATA_TYPE_E11,298
typedef enum ONVM_SORT_MODE 12,322
        SORT_ASCENDING 13,352
        SORT_DESCENDING 14,379
}ONVM_SORT_MODE_E;ONVM_SORT_MODE_E15,407
typedef int (*comp_func)comp_func17,427
typedef int (*comp_func_s)comp_func_s18,481
typedef struct onvm_callback_thunk 40,1450
        ONVM_SORT_DATA_TYPE_E type;41,1487
        ONVM_SORT_MODE_E mode;42,1523
        comp_func_s cf;43,1554
}onvm_callback_thunk_t;onvm_callback_thunk_t44,1578

onvm_nflib/onvm_includes.h,34
#define _ONVM_INCLUDES_H_54,2345

onvm_nflib/onvm_config_common.h,212
#define _ONVM_CONFIG_COMMON_H_42,2016
#define MAX_SERVICE_ID_SIZE 46,2068
#define PROC_TYPE_SECONDARY 50,2172
#define FLAG_N 51,2224
#define FLAG_R 52,2244
#define FLAG_L 53,2264
#define FLAG_DASH 54,2284

onvm_nflib/onvm_flow_dir.c,725
#define NO_FLAGS 53,2332
struct onvm_ft *sdn_ft;sdn_ft56,2353
struct onvm_ft **sdn_ft_p;sdn_ft_p57,2377
onvm_flow_dir_set_index(60,2410
int onvm_flow_dir_reset_entry(73,2827
onvm_flow_dir_init(85,3176
onvm_flow_dir_nf_init(107,3871
onvm_flow_dir_get_pkt(122,4185
onvm_flow_dir_add_pkt(130,4360
onvm_flow_dir_del_pkt(138,4537
onvm_flow_dir_del_and_free_pkt(155,4851
onvm_flow_dir_get_key(170,5244
onvm_flow_dir_add_key(178,5443
onvm_flow_dir_del_key(186,5645
onvm_flow_dir_del_and_free_key(203,6075
onvm_flow_dir_print_stats__old(220,6823
static inline uint32_t get_index_of_sc(265,9250
extract_active_service_chains(282,9812
onvm_flow_dir_print_stats(330,12810
onvm_flow_dir_clear_all_entries(363,14625

onvm_nflib/onvm_flow_dir.h,395
#define _ONVM_FLOW_DIR_H_42,2035
struct onvm_flow_entry 50,2183
        struct onvm_ft_ipv4_5tuple *key;key51,2208
        struct onvm_service_chain *sc;sc52,2249
        uint64_t ref_cnt;53,2288
        uint16_t idle_timeout;54,2314
        uint16_t hard_timeout;55,2345
        uint64_t packet_count;56,2376
        uint64_t byte_count;57,2407
        uint64_t entry_index;58,2436

onvm_nflib/onvm_pkt_common.c,302
onvm_pkt_process_tx_batch(96,3262
onvm_pkt_flush_all_nfs(140,5447
onvm_pkt_flush_nf_queue(151,5708
onvm_pkt_enqueue_nf(186,6823
onvm_pkt_flush_port_queue(221,7994
onvm_pkt_enqueue_tx_thread(250,8936
onvm_pkt_enqueue_port(272,9620
onvm_pkt_process_next_action(287,10069
onvm_pkt_drop(332,11733

onvm_nflib/onvm_sc_common.h,30
#define _SC_COMMON_H_42,2056

onvm_nflib/onvm_sc_mgr.c,210
active_sc_entries_t active_sc_list;49,2175
static inline int add_chain_to_active_sc_list(53,2374
const active_sc_entries_t* onvm_sc_get_all_active_chains(60,2704
onvm_sc_get(64,2830
onvm_sc_create(69,2901

onvm_nflib/onvm_pkt_common.h,36
#define _ONVM_PKT_COMMON_H_54,2310

onvm_nflib/onvm_common.h,20773
#define _COMMON_H_43,2037
#define ONVM_GPU 56,2251
#define ONVM_GPU_SAME_SIZE_PKTS 57,2270
#define ONVM_CACHE_LINE_SIZE 60,2451
#define ENABLE_HIGH_THROUGHPUT_MODE63,2606
#define ENABLE_LOW_LATENCY_MODE65,2678
#define MIN(69,2730
#define MAX(73,2788
#define ARBITER_PERIOD_IN_US 76,2834
#define MAX_NFS 78,2963
#define MAX_SERVICES 79,3030
#define MAX_NFS_PER_SERVICE 80,3113
#define RTE_MP_RX_DESC_DEFAULT 84,3272
#define RTE_MP_TX_DESC_DEFAULT 85,3380
#define NF_QUEUE_RINGSIZE 86,3564
#define RTE_MP_RX_DESC_DEFAULT 88,3731
#define RTE_MP_TX_DESC_DEFAULT 89,3844
#define NF_QUEUE_RINGSIZE 90,3957
#define RTE_MP_RX_DESC_DEFAULT 92,4088
#define RTE_MP_TX_DESC_DEFAULT 93,4195
#define NF_QUEUE_RINGSIZE 94,4302
#define ONVM_PACKETS_BATCH_SIZE 97,4436
#define PACKET_READ_SIZE 98,4524
#define NF_MSG_QUEUE_SIZE 99,4575
#define ONVM_NUM_RX_THREADS 102,4691
#define ONVM_NUM_TX_THREADS 103,4728
#define ONVM_NUM_MGR_AUX_THREADS 104,4765
#define ONVM_MAX_CHAIN_LENGTH 106,4870
#define SDN_FT_ENTRIES 107,4938
#define ONVM_NF_ACTION_DROP 110,5033
#define ONVM_NF_ACTION_NEXT 111,5080
#define ONVM_NF_ACTION_TONF 112,5197
#define ONVM_NF_ACTION_OUT 113,5311
#define ONVM_NF_ACTION_TO_NF_INSTANCE 114,5405
#define ONVM_ENABLE_SPEACILA_NF121,5939
#define INTERRUPT_SEM124,6055
#define ENABLE_NF_TX_STAT_LOGS133,6330
#define ENABLE_PORT_TX_STATS_LOGS136,6410
#define ENABLE_SYNC_MGR_TO_NF_MSG139,6517
#define PROFILE_PACKET_PROCESSING_LATENCY171,7485
#define ONVM_SPECIAL_NF_SERVICE_ID 180,7853
#define ONVM_SPECIAL_NF_INSTANCE_ID 182,7929
#define ENABLE_PCAP_CAPTURE_ON_OUTPUT192,8405
#define USE_SEMAPHORE 205,8791
#define NF_LOCAL_BACKPRESSURE 208,8952
#define ENABLE_CGROUPS_FEATURE 214,9203
#define ENABLE_NFV_RESL 217,9315
#define ENABLE_FT_INDEX_IN_META 220,9443
#define ENABLE_NF_WAKE_NOTIFICATION_COUNTER223,9567
#define ENABLE_NF_YIELD_NOTIFICATION_COUNTER224,9611
#define USE_POLL_MODE229,9695
#define ENABLE_USE_RTE_TIMER_MODE_FOR_MAIN_THREAD 240,10079
#define BOTTLENECK_NF_STATUS_RESET 257,10906
#define BOTTLENECK_NF_STATUS_WAIT_ENQUEUED 258,10958
#define BOTTLENECK_NF_STATUS_DROP_MARKED 259,11010
#define NF_BACKPRESSURE_APPROACH_1 265,11310
#define NF_BACKPRESSURE_APPROACH_2 269,11493
#define ENABLE_RING_WATERMARK273,11715
#define ENABLE_NF_BASED_BKPR_MARKING 277,11975
#define USE_BKPR_V2_IN_TIMER_MODE 304,13734
#define DROP_PKTS_ONLY_AT_RX_ENQUEUE 310,14088
#define ENABLE_SAVE_BACKLOG_FT_PER_NF 314,14242
#define BACKPRESSURE_USE_RING_BUFFER_MODE 316,14429
#define USE_CGROUPS_PER_NF_INSTANCE343,16002
#define ENABLE_DYNAMIC_CGROUP_WEIGHT_ADJUSTMENT346,16117
#define USE_DYNAMIC_LOAD_FACTOR_FOR_CPU_SHARE349,16247
#define STORE_HISTOGRAM_OF_NF_COMPUTATION_COST352,16411
#define ETHER_TYPE_RSYNC_DATA 370,17264
#define ETHER_TYPE_BFD 371,17304
#define ENABLE_NF_MGR_IDENTIFIER 374,17368
#define ENABLE_BFD 375,17442
#define ENABLE_PER_SERVICE_MEMPOOL 377,17592
#define ENABLE_REPLICA_STATE_UPDATE 378,17686
#define ENABLE_REMOTE_SYNC_WITH_TX_LATCH 379,17823
#define RESL_UPDATE_MODE_PER_BATCH 382,18116
#define ENABLE_ND_MARKING_IN_NFS 383,18231
#define ENABLE_PER_FLOW_TS_STORE 387,18363
#define ENABLE_CHAIN_BYPASS_RSYNC_ISOLATION 388,18521
#define ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT 389,18664
#define PRIMARY_NODE 391,18836
#define SECONDARY_NODE 392,18865
#define PREDECESSOR_NODE 393,18894
#undef ENABLE_CHAIN_BYPASS_RSYNC_ISOLATION 411,19747
#undef ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT 412,19833
#undef ENABLE_REPLICA_STATE_UPDATE437,21239
#undef ENABLE_REMOTE_SYNC_WITH_TX_LATCH438,21274
#undef ENABLE_PER_FLOW_TS_STORE439,21314
#undef ENABLE_CHAIN_BYPASS_RSYNC_ISOLATION440,21346
#undef ENABLE_NF_PAUSE_TILL_OUTSTANDING_NDSYNC_COMMIT441,21389
#define SHADOW_RING_UPDATE_PER_PKT446,21513
#define SHADOW_RING_UPDATE_PER_BATCH448,21554
#define PER_FLOW_TS_UPDATE_PER_PKT458,21828
#define PER_FLOW_TS_UPDATE_PER_BATCH460,21869
#define REPLICA_STATE_UPDATE_MODE_PER_PACKET467,21998
#define REPLICA_STATE_UPDATE_MODE_PER_BATCH469,22049
#define ONVM_NUM_RSYNC_THREADS 474,22148
#define ONVM_NUM_RSYNC_PORTS 475,22188
#define USE_BATCHED_RSYNC_TRANSACTIONS 476,22271
#define ENABLE_RSYNC_WITH_DOUBLE_BUFFERING_MODE 479,22664
#define _TX_RSYNC_TX_PORT_RING_NAME 481,22872
#define TX_RSYNC_TX_PORT_RING_SIZE 482,22958
#define _TX_RSYNC_TX_LATCH_RING_NAME 483,23091
#define TX_RSYNC_TX_LATCH_RING_SIZE 484,23178
#define _TX_RSYNC_NF_LATCH_RING_NAME 485,23253
#define TX_RSYNC_NF_LATCH_RING_SIZE 486,23340
#define _TX_RSYNC_TX_LATCH_DB_RING_NAME 489,23461
#define _TX_RSYNC_NF_LATCH_DB_RING_NAME 490,23554
#define TX_RSYNC_TX_LATCH_DB_RING_SIZE 491,23647
#define TX_RSYNC_NF_LATCH_DB_RING_SIZE 492,23717
#define ENABLE_RSYNC_MULTI_BUFFERING 495,23979
#define TX_RSYNC_AUTOCLEAR_ELAPSED_TRANSACTIONS_TIMERS 497,24216
#define USE_BATCHED_RSYNC_TRANSACTIONS500,24402
#define ONVM_NUM_RSYNC_THREADS 504,24461
#define _NF_STATE_MEMPOOL_NAME 507,24509
#define _NF_STATE_SIZE 508,24559
#define _NF_STATE_CACHE 509,24597
#define CLIENT_SHADOW_RING_SIZE 512,24657
#define _SERVICE_STATE_MEMPOOL_NAME 516,24785
#define _SERVICE_STATE_SIZE 517,24841
#define _SERVICE_STATE_CACHE 518,24923
#define _PER_FLOW_TS_MEMPOOL_NAME 522,25000
#define _PER_FLOW_TS_SIZE 523,25050
#define _PER_FLOW_TS_CACHE 524,25205
#define _PER_FLOW_TS_CACHE_MAX_ENTRIES 525,25240
#define MAX_ACTIVE_CLIENTS 529,25332
#define MAX_STANDBY_CLIENTS 530,25373
#define ACTIVE_NF_MASK 531,25433
typedef struct onvm_per_flow_ts_info 533,25482
        uint64_t ts;534,25521
}  __attribute__((__packed__)) onvm_per_flow_ts_info_t;535,25542
#define ONVM_NUM_RSYNC_THREADS 538,25635
#define PIGGYBACK_BFD_ON_ACTIVE_PORT_TRAFFIC 544,25874
#define BFD_TX_PORT_QUEUE_ID 545,26088
#define BFD_TX_PORT_QUEUE_ID 547,26169
#define RSYNC_TX_PORT_QUEUE_ID_0 552,26331
#define RSYNC_TX_PORT_QUEUE_ID_1 554,26414
#define RSYNC_TX_OUT_PORT 555,26479
#define ONVM_NF_MGR_TX_QUEUES 556,26515
#define ONVM_NF_MGR_TX_QUEUES 558,26582
#define PRIMARY_OUT_PORT 562,26694
#define SECONDARY_OUT_PORT 563,26726
typedef struct dirty_mon_state_map_tbl 575,27442
        uint64_t dirty_index;576,27483
}dirty_mon_state_map_tbl_t;dirty_mon_state_map_tbl_t578,27567
typedef struct dirty_mon_state_map_tbl_txts 580,27596
        uint8_t dirty_index;581,27642
}dirty_mon_state_map_tbl_txts_t;dirty_mon_state_map_tbl_txts_t583,27725
#define DISTRIBUTED_NIC_PORT 594,28301
#define SET_BIT(601,28721
static inline void set_bit(602,28770
#define CLEAR_BIT(606,28858
static inline void clear_bit(607,28912
#define TOGGLE_BIT(611,29005
static inline void toggle_bit(612,29059
#define TEST_BIT(615,29149
static inline long test_bit(616,29200
static inline long is_upstream_NF(620,29295
static inline long is_immediate_upstream_NF(635,30162
static inline long get_index_of_highest_set_bit(647,30828
#define ONVM_CHECK_BIT(657,31226
#define ONVM_SET_BIT(658,31284
#define ONVM_CLEAR_BIT(659,31338
struct onvm_pkt_meta 663,31528
        uint8_t action;664,31551
        uint8_t destination;665,31604
        uint8_t src;666,31656
        uint8_t chain_index;667,31713
        uint16_t ft_index;669,31827
	uint8_t flags;671,31931
        uint8_t reserved_word;672,32037
#define NF_NEED_ND_SYNC 675,32221
#define NF_BYPASS_RSYNC 676,32252
static inline struct onvm_pkt_meta* onvm_get_pkt_meta(678,32284
static inline uint8_t onvm_get_pkt_chain_index(682,32418
struct packet_buf 702,33287
        struct rte_mbuf *buffer[buffer703,33307
        uint16_t count;704,33358
struct tx_thread_info 712,33524
        unsigned first_nf;713,33548
        unsigned last_nf;714,33575
        struct packet_buf *port_tx_bufs;port_tx_bufs715,33601
struct queue_mgr 722,33749
        unsigned id;723,33768
        enum {NF,NF724,33789
        enum {NF, MGR}MGR724,33789
        enum {NF, MGR} mgr_type_t;724,33789
                struct tx_thread_info *tx_thread_info;tx_thread_info726,33840
                struct packet_buf *to_tx_buf;to_tx_buf727,33895
        struct packet_buf *nf_rx_bufs;nf_rx_bufs729,33952
struct rx_stats{rx_stats732,33995
        uint64_t rx[rx733,34012
struct tx_stats{tx_stats737,34056
        uint64_t tx[tx738,34073
        uint64_t tx_drop[tx_drop739,34112
struct port_info 743,34161
        uint8_t num_ports;744,34180
        uint8_t id[id745,34207
        struct ether_addr mac[mac746,34245
        uint8_t down_status[down_status747,34294
        volatile struct rx_stats rx_stats;748,34377
        volatile struct tx_stats tx_stats;749,34420
struct thread_info 757,34685
       unsigned queue_id;758,34706
       unsigned first_cl;759,34732
       unsigned last_cl;760,34774
       struct packet_buf *nf_rx_buf;nf_rx_buf765,35067
       struct packet_buf *port_tx_buf;port_tx_buf766,35104
       struct packet_buf *port_tx_direct_buf;port_tx_direct_buf768,35186
typedef int(*pkt_handler_func)pkt_handler_func774,35383
typedef int(*callback_handler_func)callback_handler_func776,35570
typedef void(*advanced_rings_func)advanced_rings_func778,35718
typedef void(*setup_func)setup_func780,35868
struct onvm_nf_scale_info 783,35987
        struct onvm_nf_info *parent;parent784,36015
        uint16_t instance_id;785,36052
        uint16_t service_id;786,36082
        const char *tag;tag787,36111
        void *data;data788,36136
        setup_func setup_func;789,36156
        pkt_handler_func pkt_func;790,36187
        callback_handler_func callback_func;791,36222
        advanced_rings_func adv_rings_func;792,36267
struct wakeup_info 798,36414
        unsigned first_client;799,36435
        unsigned last_client;800,36466
        uint64_t num_wakeups;801,36496
typedef struct bottleneck_ft_data 807,36588
        uint16_t chain_index;808,36624
         struct onvm_flow_entry* bft;809,36704
}bottleneck_ft_data_t;bottleneck_ft_data_t810,36763
typedef struct bottleneck_ft_info 811,36786
        uint16_t bft_count;812,36822
        uint16_t r_h;813,36889
        uint16_t w_h;814,36951
        uint16_t max_len;815,37014
        bottleneck_ft_data_t bft[bft817,37135
}bottlenect_ft_info_t;bottlenect_ft_info_t818,37192
struct onvm_nf 826,37348
        struct rte_ring *rx_q;rx_q827,37365
        struct rte_ring *tx_q;tx_q828,37396
        struct rte_ring *msg_q;msg_q829,37427
        struct onvm_nf_info *info;info830,37459
        uint16_t instance_id;831,37494
        uint8_t nf_mode;833,37580
        uint16_t parent;835,37649
        struct queue_mgr *nf_tx_mgr;nf_tx_mgr837,37730
        pkt_handler_func nf_pkt_function;840,37803
        callback_handler_func nf_callback_function;841,37845
        advanced_rings_func nf_advanced_rings_function;842,37897
        setup_func nf_setup_function;843,37953
                volatile uint64_t rx;854,38389
                volatile uint64_t rx_drop;855,38427
                volatile uint64_t tx;856,38470
                volatile uint64_t tx_drop;857,38508
                volatile uint64_t tx_buffer;859,38581
                volatile uint64_t tx_returned;860,38626
                volatile uint64_t act_out;861,38673
                volatile uint64_t act_tonf;862,38716
                volatile uint64_t act_drop;863,38760
                volatile uint64_t act_next;864,38804
                volatile uint64_t act_buffer;865,38848
                volatile uint64_t wakeup_count;869,39023
                volatile uint64_t yield_count;872,39147
                volatile uint64_t comp_cost;875,39242
                volatile uint64_t bkpr_drop;879,39357
                uint16_t max_rx_q_len;882,39482
                uint16_t max_tx_q_len;883,39521
                uint16_t bkpr_count;884,39560
        } stats;886,39646
        uint16_t is_bottleneck;890,39883
        onvm_time_t s_time;893,40017
        bottlenect_ft_info_t bft_list;897,40093
        const char *sem_name;sem_name902,40258
        key_t shm_key;903,40288
        rte_atomic16_t *volatile shm_server;905,40408
        sem_t *mutex;mutex908,40475
        uint8_t throttle_this_upstream_nf;912,40539
        uint64_t throttle_count;914,40680
        void *nf_state_mempool;nf_state_mempool921,40962
        void *service_state_pool;service_state_pool924,41151
        void *per_flow_ts_info;per_flow_ts_info929,41288
        struct rte_ring *rx_sq;rx_sq933,41355
        struct rte_ring *tx_sq;tx_sq934,41387
} __rte_cache_aligned;937,41458
#define NUMBER_OF_MODELS 951,41724
#define MAX_IMAGE 952,41751
struct image_information{image_information954,41826
  void *image_pending[image_pending956,41900
  void *ready_images[ready_images957,42010
  int num_of_ready_images;958,42091
  int index_of_ready_image;959,42156
struct get_alternate_NF_ready{get_alternate_NF_ready962,42245
  int gpu_percentage;963,42276
typedef struct models_attributes{models_attributes967,42377
  int number_of_inputs;968,42411
  int *input_dimensions;input_dimensions969,42435
  int number_of_parameters;970,42460
  void *cuda_handles;cuda_handles971,42488
  int *gpu_percentages;gpu_percentages972,42510
  float * run_times;973,42577
  int num_of_runtimes;974,42650
}models_attributes;models_attributes975,42716
struct gpu_file_listing{gpu_file_listing978,42780
  int file_index;979,42805
  char model_name[model_name980,42823
  int load_flag;981,42846
  void *cpu_function;cpu_function982,42931
  void *gpu_function;gpu_function983,42953
  models_attributes attributes;984,42975
typedef struct provide_gpu_model{provide_gpu_model989,43087
  struct onvm_nf_info *nf;nf990,43121
  char model_name[model_name991,43148
  int model_index;992,43171
}provide_gpu_model;provide_gpu_model993,43190
static inline double time_difference_usec(997,43230
struct onvm_nf_info 1013,43699
        uint16_t instance_id;1014,43721
        uint16_t service_id;1015,43751
        uint8_t status;1017,43799
        const char *tag;tag1018,43972
        void *data;data1019,43997
        pid_t pid;1020,44066
        void *nf_state_mempool;nf_state_mempool1023,44109
        void *service_state_pool;service_state_pool1025,44259
        uint32_t comp_cost;1029,44419
        uint32_t cpu_share;1033,44583
        uint32_t core_id;1034,44652
        uint32_t load;1035,44729
        uint32_t avg_load;1036,44859
        uint32_t svc_rate;1037,44930
        uint64_t exec_period;1040,45099
        uint32_t avg_svc;1043,45485
        uint32_t comp_pkts;1044,45564
        uint32_t drop_rate;1045,45773
        histogram_v2_t ht2;1050,45924
        histogram_v2_t ht2_q;1054,46023
        volatile uint8_t bNDSycn;1058,46115
        uint64_t bLastPktId;1059,46149
        int64_t max_nd,1061,46208
        int64_t max_nd, min_nd,1061,46208
        int64_t max_nd, min_nd, avg_nd,1061,46208
        int64_t max_nd, min_nd, avg_nd, delta_nd;1061,46208
  int gpu_model;1066,46289
  int gpu_percentage;1067,46307
  int job_completion_rate;1068,46349
  int gpu_execution_ready;1069,46403
  int candidate_for_restart;1070,46430
  void * function_ptr;1071,46489
  void * temp_img_info;1072,46542
  unsigned int number_of_pkts_outstanding;1074,46597
  unsigned int number_of_images_processed;1075,46690
  struct image_information *image_info;image_info1077,46795
  histogram_v2_t image_queueing_rate;1078,46862
  histogram_v2_t image_processing_rate;1079,46942
  histogram_v2_t end_to_end_image_processing_time;1081,47034
  histogram_v2_t image_processing_gpu_time;1082,47137
struct onvm_service_chain_entry 1091,47295
        uint16_t destination;1092,47329
        uint8_t action;1094,47405
        uint8_t service;1096,47471
struct onvm_service_chain 1100,47592
        struct onvm_service_chain_entry sc[sc1101,47620
        uint8_t chain_length;1102,47689
        uint8_t ref_cnt;1103,47719
        volatile uint8_t highest_downstream_nf_index_id;1105,47774
        uint8_t nf_instances_mapped;1107,47973
        uint8_t nf_instance_id[nf_instance_id1108,48071
#define MP_NF_RXQ_NAME 1115,48271
#define MP_NF_TXQ_NAME 1116,48311
#define _NF_MSG_QUEUE_NAME 1117,48351
#define PKTMBUF_POOL_NAME 1118,48396
#define MZ_PORT_INFO 1119,48443
#define MZ_NF_INFO 1120,48482
#define MZ_SERVICES_INFO 1121,48517
#define MZ_NF_PER_SERVICE_INFO 1122,48564
#define MZ_SCP_INFO 1123,48623
#define MZ_FTP_INFO 1124,48660
#define _MGR_MSG_QUEUE_NAME 1126,48698
#define _NF_MSG_QUEUE_NAME 1127,48768
#define _MGR_RSP_QUEUE_NAME 1128,48813
#define _NF_MEMPOOL_NAME 1129,48904
#define _NF_MSG_POOL_NAME 1130,48985
#define _NF_IMAGE_POOL_NAME 1133,49097
#define _IMAGE_STATE_POOL_NAME 1134,49182
#define SHMSZ 1139,49350
#define KEY_PREFIX 1140,49436
#define MP_CLIENT_SEM_NAME 1143,49520
#define MP_CLIENT_SEM_NAME 1146,49609
#define SAMPLING_RATE 1152,49845
#define ONVM_SPECIAL_NF 1153,49935
#define ONVM_NUM_WAKEUP_THREADS 1158,50057
#define ONVM_NUM_WAKEUP_THREADS 1160,50142
#define NF_WAITING_FOR_ID 1164,50262
#define NF_STARTING 1165,50385
#define NF_WAITING_FOR_RUN 1166,50494
#define NF_RUNNING 1167,50664
#define NF_PAUSED_BIT 1168,50732
#define NF_WT_ND_SYNC_BIT 1169,50829
#define NF_PAUSED 1170,51029
#define NF_WT_ND_SYNC 1171,51131
#define NF_STOPPED 1172,51247
#define NF_ID_CONFLICT 1173,51341
#define NF_NO_IDS 1174,51437
#define NF_NO_ID 1175,51527
#define ONVM_NF_HANDLE_TX 1176,51547
get_rx_queue_name(1182,51742
get_tx_queue_name(1199,52284
get_msg_queue_name(1214,52829
#define MP_NF_RXSQ_NAME 1225,53209
#define MP_NF_TXSQ_NAME 1226,53252
get_rx_squeue_name(1228,53322
get_tx_squeue_name(1235,53556
get_rsync_tx_port_ring_name(1244,53860
get_rsync_tx_tx_state_latch_ring_name(1250,54103
get_rsync_tx_nf_state_latch_ring_name(1256,54358
get_rsync_tx_tx_state_latch_db_ring_name(1263,54660
get_rsync_tx_nf_state_latch_db_ring_name(1269,54924
get_associated_active_or_standby_nf_id(1278,55199
is_primary_active_nf_id(1285,55422
is_secondary_active_nf_id(1289,55640
get_associated_active_nf_id(1293,55756
get_associated_standby_nf_id(1297,55868
   get_nf_image_state_name(1304,56045
get_rx_shmkey(1316,56363
get_sem_name(1325,56521
#define MP_CLIENT_CGROUP_NAME 1336,56886
get_cgroup_name(1338,56951
#define MP_CLIENT_CGROUP_PATH 1344,57143
get_cgroup_path(1346,57228
#define MP_CLIENT_CGROUP_CREAT 1352,57420
get_cgroup_create_cgroup_cmd(1354,57511
#define MP_CLIENT_CGROUP_ADD_TASK 1360,57718
get_cgroup_add_task_cmd(1362,57822
#define MP_CLIENT_CGROUP_SET_CPU_SHARE 1368,58047
get_cgroup_set_cpu_share_cmd(1370,58161
#define MP_CLIENT_CGROUP_SET_CPU_SHARE_ONVM_MGR 1376,58408
get_cgroup_set_cpu_share_cmd_onvm_mgr(1378,58521
set_cgroup_nf_cpu_share(1386,58801
set_cgroup_nf_cpu_share_from_onvm_mgr(1401,59435
#define RTE_LOGTYPE_APP 1419,60095
typedef struct per_core_nf_pool 1422,60168
        uint16_t nf_count;1423,60202
        uint32_t nf_ids[nf_ids1424,60229
}per_core_nf_pool_t;per_core_nf_pool_t1425,60263
typedef struct sc_entries 1429,60318
        struct onvm_service_chain *sc;sc1430,60346
        uint16_t sc_count;1431,60385
        uint16_t bneck_flag;1432,60412
}sc_entries_list;sc_entries_list1433,60441
typedef struct bottleneck_nf_entries 1439,60846
        onvm_time_t s_time;1440,60885
        uint16_t enqueue_status;1441,60913
        uint16_t nf_id;1442,61052
        uint16_t enqueued_ctr;1443,61076
        uint16_t marked_ctr;1444,61107
}bottleneck_nf_entries_t;bottleneck_nf_entries_t1445,61136
typedef struct bottlenec_nf_info 1446,61162
        uint16_t entires;1447,61197
        bottleneck_nf_entries_t nf[nf1449,61366
}bottlenec_nf_info_t;bottlenec_nf_info_t1450,61411
bottlenec_nf_info_t bottleneck_nf_list;1451,61433
#define WAIT_TIME_BEFORE_MARKING_OVERFLOW_IN_US 1455,61541
typedef struct fipo_buf_node 1466,62315
        void *pkt;pkt1467,62346
        struct fipo_buf_node *next;next1468,62365
        struct fipo_buf_node *prev;prev1469,62401
}fipo_buf_node_t;fipo_buf_node_t1470,62437
typedef struct fipo_list 1472,62456
        uint32_t buf_count;1473,62483
        fipo_buf_node_t *head;head1474,62511
        fipo_buf_node_t *tail;tail1475,62542
}fipo_list_t;fipo_list_t1476,62573
typedef fipo_list_t fipo_per_flow_list;1477,62587
#define MAX_NUM_FIPO_FLOWS 1480,62859
#define MAX_BUF_PER_FLOW 1481,62892
typedef struct nf_flow_list 1482,62991
        uint32_t flow_count;1483,63021
        fipo_per_flow_list *head;head1484,63050
        fipo_per_flow_list *tail;tail1485,63084
}nf_flow_list_t;nf_flow_list_t1486,63118
#define TEST_INLINE_FUNCTION_CALL1489,63168
typedef int(*nf_pkt_handler)nf_pkt_handler1491,63235

onvm_nflib/onvm_sc_common.c,93
int onvm_sc_append_entry(45,2099
int onvm_sc_set_entry(66,2795
void onvm_sc_print(84,3394

onvm_nflib/onvm_ringbuf.c,144
int onvm_su_ring_init(7,106
int onvm_su_ring_enqueu(16,417
int onvm_su_ring_dequeue(29,870
int onvm_su_ring_dinit(42,1349
int main(49,1566

onvm_nflib/onvm_config_common.c,483
#define IS_NULL_OR_EMPTY_STRING(49,2141
onvm_config_parse_file(52,2232
onvm_config_extract_corelist(90,3121
onvm_config_extract_memory_channels(122,3920
onvm_config_extract_portmask(141,4375
onvm_config_extract_output_location(160,4792
onvm_config_extract_service_id(183,5533
onvm_config_extract_instance_id(198,5910
onvm_config_get_item_count(213,6293
onvm_config_create_nf_arg_list(234,6694
onvm_config_create_onvm_args(373,11645
onvm_config_create_dpdk_args(441,14117

onvm_nflib/onvm_msg_common.h,967
#define _MSG_COMMON_H_44,2109
#define MSG_FROM_MGR 48,2154
#define MSG_NOOP 49,2181
#define MSG_STOP 50,2226
#define MSG_PAUSE 51,2271
#define MSG_RESUME 52,2316
#define MSG_RUN 53,2361
#define MAX_MSG_FROM_MGR 54,2402
#define MSG_GPU_MODEL 55,2437
#define MSG_RESTART 56,2527
#define MSG_GET_GPU_READY 57,2605
#define MSG_FROM_NF 59,2706
#define MSG_NF_STARTING 60,2733
#define MSG_NF_STOPPING 61,2777
#define MSG_NF_READY 62,2821
#define MSG_NF_UNBLOCK_SELF 63,2865
#define MSG_NF_REGISTER_ECB 64,2909
#define MSG_NF_TRIGGER_ECB 65,2953
#define MSG_NF_SYNC_RESP 66,2997
#define MSG_GIVE_GPU_MODEL 67,3041
#define MSG_NF_GPU_READY 68,3115
#define MSG_NF_RESTART_OK 69,3193
#define MSG_MODE_ASYNCHRONOUS 71,3273
#define MSG_MODE_SYNCHRONOUS 72,3309
struct onvm_nf_msg 74,3346
        uint8_t msg_type;75,3367
        uint8_t is_sync;77,3561
        void *msg_data;msg_data79,3689
#define ENABLE_MSG_CONSTRUCT_NF_INFO_NOTIFICATION83,3924

onvm_nflib/onvm_flow_table.c,294
uint8_t rss_symmetric_key[rss_symmetric_key49,2160
onvm_ft_create(63,2929
onvm_ft_add_pkt(109,4485
onvm_ft_lookup_pkt(132,5177
onvm_ft_remove_pkt(155,6004
onvm_ft_add_key(168,6330
onvm_ft_lookup_key(183,6732
onvm_ft_remove_key(198,7112
onvm_ft_iterate(214,7798
onvm_ft_free(221,8011

onvm_nflib/onvm_sort.c,495
#define MIN(6,83
#define MAX(7,121
#define MIN0(8,159
#define RUN_AVG(9,199
int onvm_cmp_int_a(11,244
int onvm_cmp_int_d(21,510
void onvm_sort_int(32,777
int onvm_cmp_uint32_a(40,1233
int onvm_cmp_uint32_d(50,1522
void onvm_sort_uint32(60,1811
int onvm_cmp_uint64_a(68,2286
int onvm_cmp_uint64_d(78,2575
void onvm_sort_uint64(88,2864
int onvm_cmp_uint32_r(97,3340
int onvm_cmp_func_r 119,4035
void onvm_sort_generic_r(131,4325
void onvm_sort_generic(159,5524
int main(185,6467

onvm_nflib/onvm_nflib.h,1612
#define _ONVM_NFLIB_H_54,2277
typedef int (*gpu_message_processing_func)gpu_message_processing_func289,9482
struct rte_timer image_stats_timer;300,10160
struct rte_timer image_inference_timer;303,10238
typedef int (*nf_explicit_callback_function)nf_explicit_callback_function314,10376
#define MAX_FILE_PATH_SIZE 321,10629
#define AIO_OPTION_SYNC_MODE_RW 322,10674
#define AIO_OPTION_BATCH_PROCESS 323,10752
#define AIO_OPTION_PER_FLOW_QUEUE 324,10822
typedef struct nflib_aio_info 325,10898
        uint8_t file_path[file_path326,10930
        int mode;327,10977
        uint32_t num_of_buffers;328,11037
        uint32_t max_buffer_size;329,11124
        uint32_t aio_options;330,11202
        uint32_t wait_pkt_queue_len;331,11274
}nflib_aio_info_t;nflib_aio_info_t332,11376
typedef struct onvm_nflib_aio_init_info 333,11395
        nflib_aio_info_t aio_read;334,11437
        nflib_aio_info_t aio_write;335,11496
        uint32_t max_worker_threads;336,11556
        uint8_t aio_service_type;337,11631
}onvm_nflib_aio_init_info_t;onvm_nflib_aio_init_info_t338,11722
typedef struct nflib_aio_status 339,11751
        int32_t rw_status;340,11785
        void *rw_buffer;rw_buffer341,11870
        uint8_t rw_buf_len;342,11973
        off_t rw_offset;343,12021
}nflib_aio_status_t;nflib_aio_status_t344,12092
typedef int (*aio_notify_handler_cb)aio_notify_handler_cb349,12260
typedef struct dirty_mon_state_map_tbl 366,13189
        uint64_t dirty_index;367,13230
}dirty_mon_state_map_tbl_t;dirty_mon_state_map_tbl_t369,13314
#define DIRTY_MAP_PER_CHUNK_SIZE 373,13373

onvm_nflib/histogram.c,623
#define MIN(6,83
#define MAX(7,121
#define MIN0(8,159
#define RUN_AVG(9,199
#define EWMA_ALPHA 10,243
#define EWMA_AVG(11,270
void hist_init(13,351
void hist_clear(38,994
void hist_store(42,1071
void hist_print(64,1788
uint32_t hist_mean(82,2549
uint32_t hist_median(99,2991
uint32_t hist_mode(145,4262
uint32_t hist_percentile(162,4790
uint32_t get_histogram(203,6179
uint32_t get_modes(227,6953
void hist_init_v2(265,8228
void hist_store_v2(283,8617
void hist_compute_v2(307,9526
void hist_extract_all_v2(329,10571
uint32_t hist_extract_v2(338,10857
void hist_print_v2(385,12409
int main(393,12717

onvm_nflib/onvm_ringbuf.h,316
#define _ONVM_SURING_H_3,25
#define MAX_RINGBUF_SIZE 6,130
typedef struct onvm_single_user_ring 7,164
        uint16_t r_count;8,203
        uint16_t r_h;9,271
        uint16_t w_h;10,334
        uint16_t max_len;11,398
        void* ring[ring12,462
}onvm_single_user_ring_t;onvm_single_user_ring_t13,500

onvm_nflib/onvm_sc_mgr.h,375
#define _SC_MGR_H_42,2043
typedef struct active_sc_entries 48,2112
        uint32_t sc_count;49,2147
        struct onvm_service_chain *sc[sc50,2174
} __rte_cache_aligned active_sc_entries_t;51,2229
onvm_next_action(55,2338
onvm_sc_next_action(63,2550
onvm_next_destination(68,2718
onvm_sc_next_destination(76,2923
onvm_sc_get_next_action_and_destionation(81,3096

onvm_mgr/onvm_mgr.h,81
#define _ONVM_MGR_H_54,2290
#define TO_PORT 90,3076
#define TO_CLIENT 91,3094

onvm_mgr/onvm_nf.c,2185
uint16_t next_instance_id 60,2455
uint8_t  global_bkpr_mode=64,2665
uint16_t downstream_nf_overflow 65,2694
uint16_t highest_downstream_nf_service_id=66,2731
uint16_t lowest_upstream_to_throttle 67,2776
uint64_t throttle_count 68,2818
#define EWMA_LOAD_ADECAY 71,2891
nf_schedule_info_t nf_sched_param;75,3069
#define DEFAULT_NF_CPU_SHARE 86,3686
typedef struct nf_core_and_cc_info 89,3806
        uint32_t total_comp_cost;90,3843
        uint32_t total_nf_count;91,3954
        uint32_t total_pkts_served;92,4048
        uint32_t total_load;93,4158
        uint64_t total_load_cost_fct;94,4259
}nf_core_and_cc_info_t;nf_core_and_cc_info_t95,4395
static inline void assign_nf_cgroup_weight(102,4754
static inline void assign_all_nf_cgroup_weight(113,5252
void compute_nf_exec_period_and_cgroup_weight(119,5445
void compute_and_assign_nf_cgroup_weight(199,11771
void extract_nf_load_and_svc_rate_info(289,18673
void compute_and_order_nf_wake_priority(331,21103
int nf_sort_func(343,21699
void setup_nfs_priority_per_core_list(361,22204
inline void monitor_nf_node_liveliness_via_pid_monitoring(395,23945
onvm_nf_is_valid(412,25028
onvm_nf_is_paused(417,25231
onvm_nf_is_processing(421,25330
onvm_nf_is_waiting_on_NDSYNC(425,25520
onvm_nf_is_NDSYNC_set(434,25896
onvm_nf_is_instance_id_free(444,26178
onvm_nf_next_instance_id(449,26281
int onvm_nf_recv_resp_msg(468,26865
void onvm_nf_recv_and_process_msgs(502,27979
onvm_nf_check_status(584,31009
onvm_nf_stats_update(600,31576
onvm_nf_service_to_nf_map_V2(620,32310
onvm_nf_service_to_nf_map(648,33223
onvm_nf_send_msg(682,34918
#define MAX_SYNC_RETRY_COUNT 703,35606
onvm_nf_send_msg_sync(706,35653
int onvm_nf_register_run(732,37001
onvm_nf_start(830,42655
onvm_nf_stop(891,44809
static sc_entries_list sc_list[sc_list975,48184
onvm_mark_all_entries_for_bottleneck(979,48244
onvm_clear_all_entries_for_bottleneck(1048,51976
int enqueu_nf_to_bottleneck_watch_list(1117,56339
int dequeue_nf_from_bottleneck_watch_list(1144,57705
static inline void mark_nf_backpressure_from_bottleneck_watch_list(1171,59059
int check_and_enqueue_or_dequeue_nfs_from_bottleneck_watch_list(1184,59571

onvm_mgr/zoo_queue.h,371
#define ZOOKEEPER_QUEUE_H_20,835
struct zkr_queue 36,1030
    zhandle_t *zh;zh37,1049
    char *path;path38,1068
    struct ACL_vector *acl;acl39,1084
    pthread_mutex_t pmutex;40,1112
    char *node_name;node_name41,1140
    int node_name_length;42,1161
    char *cached_create_path;cached_create_path43,1187
typedef struct zkr_queue zkr_queue_t;46,1221

onvm_mgr/onvm_pkt.h,29
#define _ONVM_PKT_H_54,2296

onvm_mgr/onvm_zookeeper.c,914
#define EXPIRATION_CACHE_LEN 66,2624
#define MAC_STR_LEN 67,2657
static zhandle_t *zh zh70,2719
static const clientid_t *myid myid71,2748
static char *nf_stat_paths[nf_stat_paths72,2786
struct remote_service_result 75,2857
        char mac_address[mac_address76,2888
        struct ether_addr mac_address_struct;77,2927
        time_t expiration;78,2973
static struct remote_service_result service_lookup_cache[service_lookup_cache80,3003
onvm_zk_connect(92,3558
onvm_zk_client_id(112,4014
onvm_zk_init(118,4115
onvm_zk_nf_start(159,5460
onvm_zk_nf_stop(214,7574
onvm_zk_disconnect(246,8576
onvm_zk_lookup_service(253,8689
onvm_zk_update_nf_stats(308,10830
update_service_last_modified(372,13274
get_service_last_modified(390,13862
can_scale_locally(415,14684
enqueue_remote_scale_msg(433,15261
can_scale_remotely(448,15701
mac_string_to_struct(494,17267
free_String_vector(517,17872

onvm_mgr/onvm_init.c,3276
struct onvm_nf *nfs nfs58,2377
struct port_info *ports ports59,2405
struct rte_mempool *pktmbuf_pool;pktmbuf_pool61,2438
struct rte_mempool *nf_info_pool;nf_info_pool62,2472
struct rte_mempool *nf_msg_pool;nf_msg_pool63,2506
struct rte_ring *mgr_msg_queue;mgr_msg_queue64,2539
struct rte_mempool *nf_image_pool;nf_image_pool67,2588
struct rte_mempool *image_states_pool;image_states_pool68,2623
struct rte_ring *mgr_rsp_queue;mgr_rsp_queue72,2703
struct rte_mempool *nf_state_pool;nf_state_pool76,2766
struct rte_mempool *service_state_pool;service_state_pool80,2868
void **services_state_pool;services_state_pool81,2908
struct rte_mempool *per_flow_ts_pool;per_flow_ts_pool86,3051
void *onvm_mgr_tx_per_flow_ts_info;onvm_mgr_tx_per_flow_ts_info88,3158
void *onvm_mgr_tx_per_flow_ts_info_db[onvm_mgr_tx_per_flow_ts_info_db91,3277
void *onvm_mgr_tx_per_flow_ts_info_db;onvm_mgr_tx_per_flow_ts_info_db93,3352
struct rte_ring *tx_port_ring[tx_port_ring99,3453
struct rte_ring *tx_tx_state_latch_ring[tx_tx_state_latch_ring100,3581
struct rte_ring *tx_nf_state_latch_ring[tx_nf_state_latch_ring101,3719
struct rte_ring *tx_tx_state_latch_db_ring[tx_tx_state_latch_db_ring104,3972
struct rte_ring *tx_nf_state_latch_db_ring[tx_nf_state_latch_db_ring105,4168
struct rte_ring *tx_tx_state_latch_db_ring[tx_tx_state_latch_db_ring107,4402
struct rte_ring *tx_nf_state_latch_db_ring[tx_nf_state_latch_db_ring108,4543
uint16_t **services;services113,4738
uint16_t *nf_per_service_count;nf_per_service_count114,4759
struct onvm_service_chain *default_chain;default_chain116,4792
struct onvm_service_chain **default_sc_p;default_sc_p117,4834
int onvm_socket_id;120,4929
void *zmq_ctx;zmq_ctx124,5006
void *onvm_socket_id;onvm_socket_id125,5021
void *onvm_socket_ctx;onvm_socket_ctx126,5043
uint8_t remote_eth_addr[remote_eth_addr130,5094
struct ether_addr remote_eth_addr_struct;131,5156
uint32_t nf_mgr_id;155,5816
#define RX_PTHRESH 178,6510
#define RX_HTHRESH 179,6582
#define RX_WTHRESH 180,6650
#define TX_PTHRESH 187,6932
#define TX_HTHRESH 188,7005
#define TX_WTHRESH 189,7074
static const struct rte_eth_conf port_conf 191,7150
static const struct rte_eth_rxconf rx_conf 212,7905
static const struct rte_eth_txconf tx_conf 221,8137
init(237,8515
init_mbuf_pools(363,13240
static int init_nf_state_pool(380,14015
static int init_service_state_pool(400,15167
static int init_per_flow_ts_pool(418,16108
                        #define PER_FLOW_TS_POOL_COUNT 422,16294
                        #define PER_FLOW_TS_POOL_COUNT 424,16415
                        #define PER_FLOW_TS_POOL_COUNT 428,16685
                        #define PER_FLOW_TS_POOL_COUNT 430,16776
                #define PER_FLOW_TS_POOL_COUNT 435,16941
                #define PER_FLOW_TS_POOL_COUNT 437,17016
static int init_rsync_tx_rings(458,18073
init_nf_msg_pool(527,23261
static int init_image_pool(543,23829
static int init_images_state(559,24383
init_client_info_pool(607,26135
init_port(651,27981
init_shm_rings(745,32040
init_mgr_queues(976,43044
check_all_ports_link_status(1006,43970
#define CHECK_INTERVAL 1007,44038
#define MAX_CHECK_TIME 1008,44077
static uint32_t read_onvm_mgr_id_from_system(1069,46716

onvm_mgr/onvm_wakemgr.c,1309
unsigned nfs_wakethr[nfs_wakethr61,2542
struct wakeup_info *wakeup_infos;wakeup_infos64,2607
#define WAKE_INTERVAL_IN_US 76,3093
#define USLEEP_INTERVAL 77,3173
struct rte_timer wake_timer[wake_timer82,3473
typedef struct core_nf_timers 88,3685
        struct rte_timer    timer;89,3717
        uint16_t            timer_status;90,3752
        uint16_t            index;91,3815
        uint16_t            nf_id;92,3887
        uint16_t            core_id;93,3922
        uint16_t            next_nf_id;94,3959
        uint64_t            exec_period;95,3999
}core_nf_timers_t;core_nf_timers_t96,4040
core_nf_timers_t    core_timers[core_timers97,4059
static void wake_timer_cb(107,4544
initialize_wake_timers(119,5189
initialize_per_core_timers 140,5728
static void per_core_timer_cb(153,6222
int launch_core_nf_timer(168,6937
static void  arbiter_wakeup_client(194,8090
whether_wakeup_client(224,9395
notify_client(293,11976
wakeup_client_internal(301,12124
wakeup_client(315,12526
static inline void handle_wakeup_old(325,12764
static inline void handle_wakeup_ordered(332,12999
inline void handle_wakeup(362,14463
#define WAKE_THREAD_SLEEP_INTERVAL_NS 366,14609
wakemgr_main(368,14659
inline void check_and_wakeup_nf(389,15328
inline void check_and_block_nf(399,15679

onvm_mgr/onvm_gpu.h,1013
#define ONVM_GPU_H2,19
char ml_file_name[ml_file_name16,236
const char * ml_model_name[ml_model_name17,278
#define NUM_OF_RUNTIME_DATAPOINTS 19,325
struct gpu_file_listing * file_listing;22,443
const char *model_dir;model_dir25,522
static inline void set_filename(29,627
typedef enum nf_state{nf_state98,3068
typedef enum nf_state{zstart,zstart98,3068
typedef enum nf_state{zstart, zrestart,98,3068
typedef enum nf_state{zstart, zrestart, zstop}zstop98,3068
typedef enum nf_state{zstart, zrestart, zstop} nf_state;98,3068
typedef struct zinformation_format{zinformation_format100,3126
  int num_of_elements;101,3162
  int pid_array[pid_array102,3185
}zinfo_format;zinfo_format103,3205
typedef struct zmgr_msg_struct{zmgr_msg_struct106,3288
  nf_state state;107,3320
  size_t msg_size;108,3338
  struct timespec timestamp;109,3357
  zinfo_format information;110,3386
} zmgr_msg;111,3523
void * zmqContext;116,3591
void * zmqRequester;117,3610
const char * ipc_file_path;118,3631

onvm_mgr/onvm_pkt.c,787
static inline int get_flow_entry(62,2775
onvm_pkt_process_rx_batch(78,3293
onvm_pkt_process_tx_batch(137,5743
onvm_pkt_flush_all_ports(227,9586
onvm_pkt_flush_all_nfs(241,9838
onvm_pkt_drop_batch(254,10076
onvm_pkt_flush_port_queue(269,10378
onvm_pkt_flush_nf_queue(359,14075
onvm_pkt_enqueue_port(423,16400
onvm_pkt_enqueue_port_v2(439,16940
onvm_pkt_enqueue_nf(467,18006
onvm_pkt_process_next_action(609,25943
onvm_pkt_drop(664,28128
onvm_detect_and_set_ecn_ce(674,28287
#define CE_BITS 676,28421
static inline void write_ft_to_cl_bft(692,29174
static inline void read_all_ft_frm_cl_bft(729,31519
void onvm_set_back_pressure_v2(771,34011
onvm_set_back_pressure(790,34523
onvm_check_and_reset_back_pressure_v2(873,38901
onvm_check_and_reset_back_pressure(903,40146

onvm_mgr/main.c,1977
onvm_bfd_init_config_t bfd_config;68,2625
int node_role 73,2770
#define MAX_SHUTDOWN_ITERS 79,2999
static uint8_t main_keep_running 82,3090
static uint8_t worker_keep_running 86,3275
int process_nf_function_inline(91,3511
nf_pkt_handler nf_process_packet 94,3662
uint8_t remote_eth_addr[remote_eth_addr101,3819
struct ether_addr remote_eth_addr_struct;102,3847
typedef struct thread_core_map_t 105,3897
        unsigned rx_th_core[rx_th_core106,3932
        unsigned tx_t_core[tx_t_core107,3982
        unsigned wk_th_core[wk_th_core109,4034
        unsigned mn_th_core;111,4095
}thread_core_map_t;thread_core_map_t112,4124
static thread_core_map_t thread_core_map;113,4144
#define NF_STATUS_CHECK_PERIOD_IN_MS 117,4237
#define NF_STATUS_CHECK_PERIOD_IN_US 118,4318
#define DISPLAY_STATS_PERIOD_IN_MS 119,4448
#define NF_LOAD_EVAL_PERIOD_IN_MS 120,4526
#define USLEEP_INTERVAL_IN_US 121,4585
struct rte_timer display_stats_timer;128,5211
struct rte_timer nf_status_check_timer;129,5310
struct rte_timer nf_load_eval_timer;130,5438
struct rte_timer main_arbiter_timer;131,5548
display_stats_timer_cb(147,6360
nf_status_check_timer_cb(156,6681
nf_load_stats_timer_cb(164,6873
arbiter_timer_cb(185,7671
initialize_master_timers(198,8154
#define MAIN_THREAD_POLL249,10124
#define MAIN_THREAD_SLEEP_INTERVAL_NS 251,10174
master_thread_main(257,10309
rx_thread_main(344,13437
#define PACKET_READ_SIZE_TX 396,15804
tx_thread_main(398,15876
static inline int create_rx_threads(468,19113
static inline int create_tx_threads(487,20093
static inline int create_wakeup_threads(517,21791
static inline int create_rsync_threads(544,23399
main(558,23979
#define ENABLE_REPLAY_LATENCY_PROFILER694,28990
static onvm_interval_timer_t ts;696,29067
void replay_and_terminate_failover(698,29107
void initiate_node_failover(710,29511
static int bfd_handle_callback(728,30183
static void signal_handler(748,30996
register_signal_handler(765,31615

onvm_mgr/onvm_zk_watch.h,33
#define ONVM_ZK_WATCH_H_52,2338

onvm_mgr/onvm_bfd.h,2650
#define _ONVM_BFD_H_52,2352
#define BasePacketSize 94,4313
#define MaxAuthDataSize 97,4423
#define AuthHeaderSize 100,4516
#define MaxPacketSize 103,4635
#define ListenPort 106,4746
#define TTLValue 109,4805
#define MinSourcePort 112,4910
#define MaxSourcePort 115,5023
#define Version 118,5134
#define BaseMinTxInterval 121,5235
#define BFD_CHECKPOINT_PERIOD_IN_US 123,5273
#define BFDEchoInterval_us 126,5555
#define BFDMinRxInterval_us 127,5617
#define BFDMinTxInterval_us 128,5655
#define BFDEchoMissMultiplier 129,5693
#define BFDTimeoutValue_us 130,5778
#define BFDTimeoutErr_oft_us 131,5853
#define BFD_TIMEOUT_INTERVAL 132,5906
#define BFD_SLOW_SEND_RATE_RATIO_COUNTER 133,5982
#define BFD_MAX_PER_INTV_PER_PORT 134,6128
typedef enum BFD_StateValue136,6242
  AdminDown 138,6272
  Down 139,6289
  Init 140,6306
  Up 141,6323
}BFD_StateValue;BFD_StateValue142,6340
typedef enum BFD_DiagStateValue148,6410
  None 150,6444
  ControlDetectExpired 151,6456
  EchoFailed 152,6484
  NeighborSessionDown 153,6502
  ForwardingReset 154,6529
  PathDown 155,6552
  ConcatPathDown 156,6568
  AdmDown 157,6590
  ReverseConcatPathDown 158,6605
  MaxDiagnostic 159,6634
}BFD_DiagStateValue;BFD_DiagStateValue160,6655
typedef enum BFD_AuthTypeValue168,6811
  none 170,6844
  Password 171,6856
  MD5 172,6872
  MeticulousMD5 173,6883
  SHA1 174,6904
  MeticulousSHA1 175,6916
}BFD_AuthTypeValue;BFD_AuthTypeValue176,6938
typedef struct BfdPacketHeader183,7026
  uint8_t versAndDiag;185,7059
  uint8_t flags;186,7132
  uint8_t detectMult;187,7149
  uint8_t length;188,7171
  uint32_t myDisc;189,7222
  uint32_t yourDisc;190,7270
  uint32_t txDesiredMinInt;191,7320
  uint32_t rxRequiredMinInt;192,7348
  uint32_t rxRequiredMinEchoInt;193,7377
} __attribute__((__packed__)) BfdPacketHeader;216,8889
typedef struct BFDAuthData223,9020
  uint8_t type;225,9049
  uint8_t len;226,9065
  uint8_t data[data227,9080
}BFDAuthData;BFDAuthData233,9295
typedef struct BfdPacket238,9351
  BfdPacketHeader header;240,9378
}BfdPacket;BfdPacket242,9426
#define BFD_STATUS_REMOTE_DOWN 252,9543
#define BFD_STATUS_LOCAL_DOWN 253,9579
typedef int(*bfd_status_notifier_cb)bfd_status_notifier_cb254,9615
#define MAX_BFD_SESSIONS 255,9690
typedef struct onvm_bfd_init_config 256,9720
        uint32_t bfd_identifier;257,9758
        uint8_t num_ports;258,9791
        uint8_t session_mode[session_mode259,9818
        bfd_status_notifier_cb cb_func;260,9866
}onvm_bfd_init_config_t;onvm_bfd_init_config_t261,9906
#define BFD_SESSION_MODE_PASSIVE 263,9932
#define BFD_SESSION_MODE_ACTIVE 264,9972

onvm_mgr/onvm_args.h,66
#define _ONVM_ARGS_H_53,2302
#define DEFAULT_SERVICE_ID 60,2406

onvm_mgr/onvm_stats.c,935
#define onvm_stats_display_nfs(68,2676
static FILE *stats_out;stats_out93,3215
static FILE *json_stats_out;json_stats_out94,3239
char buffer[buffer100,3423
onvm_stats_init(105,3527
onvm_stats_set_output(113,3932
onvm_stats_cleanup(142,5190
void onvm_stats_display_rsync_tx_thread_stats(151,5449
onvm_stats_display_all(170,6503
onvm_stats_clear_all_clients(200,7501
onvm_stats_clear_client(213,7847
#define USE_EXTENDED_PORT_STATS223,8182
get_port_stats_rate(226,8257
void onvm_stats_display_mode(268,10788
onvm_stats_display_ports(316,12045
onvm_stats_display_clients(396,15803
void onvm_stats_display_chains(604,27034
onvm_stats_clear_terminal(614,27324
onvm_stats_print_MAC(623,27552
onvm_print_ethaddr(644,28344
onvm_stats_flush(652,28579
onvm_stats_truncate(663,28772
onvm_json_reset_objects(679,29227
static onvm_stats_snapshot_t sn_local[sn_local699,29923
int get_onvm_nf_stats_snapshot_v2(700,29981

onvm_mgr/onvm_bfd.c,1936
#define BFD_TX_PORT_QUEUE_ID 54,2401
#define BFD_PKT_OFFSET 59,2547
typedef struct bfd_session_status 61,2649
        uint8_t mode;63,2740
        BFD_StateValue local_state;66,2837
        BFD_StateValue remote_state;67,2873
        BFD_DiagStateValue local_diags;68,2910
        BFD_DiagStateValue remote_diags;69,2950
        uint64_t local_descr;72,3053
        uint64_t remote_descr;73,3083
        uint64_t tx_rx_interval;76,3211
        uint64_t last_sent_pkt_ts;78,3293
        uint64_t last_rcvd_pkt_ts;80,3382
        uint64_t pkt_missed_counter;82,3531
        uint64_t bfd_status_change_counter;84,3606
        uint64_t last_rx_pkts;88,3754
        uint8_t last_rx_set;89,3785
        uint8_t  skip_bfd_query;90,3814
}bfd_session_status_t;bfd_session_status_t93,3855
typedef struct bfd_pkt_stat_t 95,3879
        uint64_t rx_count;96,3911
        uint64_t tx_count;97,3938
}bfd_pkt_stat_t;bfd_pkt_stat_t98,3965
bfd_pkt_stat_t bfd_stat;100,3983
struct rte_timer bfd_status_checkpoint_timer;103,4050
bfd_session_status_t bfd_sess_info[bfd_sess_info104,4096
bfd_status_notifier_cb notifier_cb;105,4150
BfdPacket bfd_template;106,4186
static void init_bfd_session_status(120,4816
onvm_bfd_start(146,5859
onvm_bfd_stop(151,5907
bfd_status_checkpoint_timer_cb(155,5961
static inline int initialize_bfd_timers(169,6700
static inline int bfd_send_packet_out(176,7101
static void set_bfd_packet_template(184,7469
int print_bfd_packet(194,8026
static void parse_and_set_bfd_session_info(205,8802
struct rte_mbuf* create_bfd_packet(238,10917
int parse_bfd_packet(292,13017
static void send_bfd_echo_packets(310,13796
static void check_bdf_remote_status(340,15377
onvm_bfd_process_incoming_packets(395,18500
onvm_bfd_init(405,18867
onvm_bfd_deinit(427,19631
int onvm_print_bfd_status(432,19677
struct rte_mbuf* create_bfd_packet_spcl(458,21563
void send_bfd_echo_packets_spcl(503,23351

onvm_mgr/onvm_ft_install.c,1068
typedef struct onvm_ft_args 71,2775
        const char* servicechain_file;72,2805
        const char* ipv4rules_file;73,2883
        const char* base_ip_addr;74,2968
        uint32_t max_ip_addrs;75,3050
        uint32_t max_ft_rules;76,3136
        uint32_t rev_order;77,3220
}onvm_ft_args_t;onvm_ft_args_t78,3310
#define MAX_FLOW_TABLE_ENTRIES 81,3375
static onvm_ft_args_t globals 82,3421
#define MAX_SERVICE_CHAINS 92,3799
int schains[schains93,3829
int alt_port[alt_port94,3885
int max_service_chains=95,4025
struct onvm_ft_ipv4_5tuple ipv4_5tRules[ipv4_5tRules96,4051
uint32_t max_ft_entries=97,4116
static uint32_t get_ipv4_value(101,4243
parse_service_chains(133,5432
parse_ipv4_5t_rules(212,8124
setup_service_chain_for_flow_entry(277,10964
setup_schain_and_flow_entry_for_flip_key(343,13626
add_flow_key_to_sc_flow_table(429,16509
populate_random_flow_rules(517,19459
setup_flow_rule_and_sc_entries(582,22827
static int setup_flowrule_for_packet(599,23426
int init_onvm_ft_install(678,26853
int onvm_ft_handle_packet(694,27321

onvm_mgr/onvm_nf.h,477
#define _ONVM_NF_H_53,2354
#define MAX_CORES_ON_NODE 57,2410
typedef struct nfs_per_core 59,2498
        uint16_t sorted;60,2528
        uint16_t count;61,2622
        uint32_t nf_ids[nf_ids62,2703
        uint64_t run_time[run_time63,2817
}nfs_per_core_t;nfs_per_core_t64,2924
typedef struct nf_schedule_info 66,2942
        uint16_t sorted;67,2976
        nfs_per_core_t nf_list_per_core[nf_list_per_core68,3001
}nf_schedule_info_t;nf_schedule_info_t69,3061

onvm_mgr/onvm_vxlan.c,115
onvm_encapsulate_pkt(71,2893
onvm_decapsulate_pkt(158,6319
process_inner_cksums(201,7780
get_psd_sum(260,10054

onvm_mgr/onvm_special_nf0.h,37
#define _ONVM_SPECIAL_NF0_H_53,2420

onvm_mgr/onvm_vxlan.h,852
#define ONVM_VXLAN_H_51,2343
#define RTE_LOGTYPE_VXLAN 57,2432
#define IPV4_HEADER_LEN 59,2477
#define UDP_HEADER_LEN 60,2504
#define VXLAN_HEADER_LEN 61,2530
#define IP_VERSION 63,2558
#define IP_HDRLEN 64,2582
#define IP_DEFTTL 65,2660
#define IP_VHL_DEF 66,2705
#define IP_DN_FRAGMENT_FLAG 67,2749
#define VXLAN_HF_VNI 68,2784
#define DEFAULT_VXLAN_PORT 69,2816
#define VXLAN_SRC_IP 73,2961
#define VXLAN_DST_IP 74,2996
union tunnel_offload_info 77,3096
        uint64_t data;78,3124
                uint64_t l2_len:l2_len80,3164
                uint64_t l3_len:l3_len81,3231
                uint64_t l4_len:l4_len82,3297
                uint64_t tso_segsz:tso_segsz83,3358
                uint64_t outer_l2_len:outer_l2_len84,3426
                uint64_t outer_l3_len:outer_l3_len85,3498
} __rte_cache_aligned;87,3582

onvm_mgr/onvm_init.h,953
#define _ONVM_INIT_H_54,2317
#define MBUFS_PER_NF 97,3416
#define MBUFS_PER_PORT 98,3514
#define MBUF_CACHE_SIZE 99,3617
#define MBUF_OVERHEAD 100,3645
#define RX_MBUF_DATA_SIZE 101,3716
#define MBUF_SIZE 102,3747
#define NF_INFO_SIZE 104,3802
#define NF_INFO_CACHE 105,3851
#define NF_MSG_SIZE 107,3971
#define NF_MSG_CACHE_SIZE 108,4018
#define IMAGE_CACHE_SIZE 112,4115
#define IMAGE_STATE_CACHE_SIZE 113,4142
#define CLIENT_QUEUE_RING_THRESHOLD 120,4470
#define CLIENT_QUEUE_RING_THRESHOLD_GAP 121,4511
#define CLIENT_QUEUE_RING_THRESHOLD 123,4617
#define CLIENT_QUEUE_RING_THRESHOLD_GAP 124,4658
#define CLIENT_QUEUE_RING_WATER_MARK_SIZE 127,4740
#define CLIENT_QUEUE_RING_LOW_THRESHOLD 128,4848
#define CLIENT_QUEUE_RING_LOW_WATER_MARK_SIZE 129,5048
#define ECN_EWMA_ALPHA 130,5164
#define CLIENT_QUEUE_RING_ECN_MARK_SIZE 131,5195
#define NO_FLAGS 132,5368
#define DYNAMIC_CLIENTS 134,5388
#define STATIC_CLIENTS 135,5414

onvm_mgr/onvm_special_nf0.c,4237
#define ONVM_MGR_ACT_AS_2PORT_FWD_BRIDGE 74,2939
static uint8_t keep_running 80,3157
static struct onvm_nf *nf0_cl nf0_cl81,3190
inline int set_packet_forwarind_actions(86,3484
int send_direct_on_assigned_port(104,4276
int send_direct_on_alt_port(155,6822
static int onv_pkt_send_on_alt_port(208,8838
struct state_info 313,13182
        struct rte_mempool *pktmbuf_pool;pktmbuf_pool314,13202
        uint16_t nf_destination;315,13244
        uint32_t *source_ips;source_ips316,13277
        int print_flag;317,13307
struct state_info *state_info;state_info321,13394
typedef struct onvm_arp_resp_args 323,13426
        const char* ipmap_file;324,13462
        const char* ipmap_csv;325,13533
        uint32_t max_ports;326,13608
}onvm_arp_resp_args_t;onvm_arp_resp_args_t327,13687
static onvm_arp_resp_args_t arp_resp_info 328,13710
parse_port_ip_map(334,13874
send_arp_reply_v2(358,15042
int send_arp_reply(418,17308
static int try_check_and_send_arp_response(475,19512
static int onvm_special_nf_arp_responder_init(501,21278
const uint16_t MAX_SNAPLEN 526,22424
#define USE_PCAP_ROTATION_BUFFERS528,22469
#define PCAP_FILE_NAME 530,22537
#define PACP_PER_PORT_FILE_NAME 531,22581
get_pcap_file_name(533,22663
typedef struct pcap_session_meta 538,22872
        uint64_t max_capture_size;539,22907
        uint64_t max_packet_count;540,22942
        uint32_t reset_log_period_in_ms;541,22977
        const char* capture_file;544,23052
        uint8_t capture_port;545,23086
        pcap_t *pd;pd546,23116
        pcap_dumper_t *pcap_dumper;pcap_dumper547,23136
        uint8_t is_active;548,23172
        uint64_t captured_size;549,23199
        uint32_t captured_packet_count;550,23231
        onvm_time_t capture_start_time;551,23271
        onvm_time_t capture_end_time;552,23311
}pcap_session_meta_t;pcap_session_meta_t554,23350
#define MAX_PCAP_ROT_FILES 557,23379
#define PCAP_FILE_NAME 558,23411
#define PACP_PER_PORT_FILE_NAME 559,23455
get_pcap_file_name(561,23540
typedef struct pcap_log_meta{pcap_log_meta566,23771
        const char* capture_file;568,23834
        pcap_t *pd;pd569,23868
        pcap_dumper_t *pcap_dumper;pcap_dumper570,23888
        uint8_t is_active;571,23924
        uint64_t captured_size;572,23951
        uint32_t captured_packet_count;573,23983
        onvm_time_t capture_start_time;574,24023
        onvm_time_t capture_end_time;575,24063
}pcap_log_meta_t;pcap_log_meta_t577,24102
typedef struct pcap_session_meta 578,24120
        uint64_t max_capture_size;579,24155
        uint64_t max_packet_count;580,24190
        uint32_t reset_log_period_in_ms;581,24225
        uint8_t capture_port;582,24266
        uint8_t log_active_status;583,24296
        uint8_t ring_index;584,24331
        pcap_log_meta_t log[log585,24359
}pcap_session_meta_t;pcap_session_meta_t587,24409
#define PCAP_MAX_PACKET_COUNT 592,24604
#define PCAP_MAX_CAPTURE_SIZE 593,24698
#define USE_PCAP_PER_OUT_PORT594,24818
pcap_session_meta_t pcap_info 596,24878
pcap_session_meta_t pcap_infos[pcap_infos608,25388
typedef enum pcap_log_status_type 610,25445
        pcap_log_status_unused=611,25481
        pcap_log_status_active_logging=612,25515
        pcap_log_status_active_logging_stopped=613,25557
        pcap_log_status_replay_on=614,25607
        pcap_log_status_replay_finished=615,25644
}pcap_log_status_type_e;pcap_log_status_type_e616,25687
inline int onvm_util_init_pacp_logger(619,25747
inline int onvm_util_clear_pcap_log(654,27488
inline int onvm_util_log_packets(678,28433
inline const char* onvm_util_close_and_get_pdump_file(731,31390
inline int onvm_util_init_pacp_logger(757,32477
inline int onvm_util_clear_pcap_log(780,33833
inline int onvm_util_log_packets(804,35119
inline const char* onvm_util_close_and_get_pdump_file(836,36928
inline int onvm_util_replay_all_packets(852,37844
static inline int onvm_util_plain_pcap_replay(863,38180
static inline int onvm_util_plain_pcap_replay(965,43086
#define ENABLE_LOCAL_LATENCY_PROFILER977,43536
int onv_pkt_send_to_special_nf0(1037,46434
int process_special_nf0_rx_packets(1086,49108
int start_special_nf0(1204,54756
int stop_special_nf0(1255,56680

onvm_mgr/onvm_ft_install.h,36
#define _ONVM_FT_INSTALL_H_53,2425

onvm_mgr/onvm_gpu.c,489
static inline struct onvm_nf_info *shadow_nf(shadow_nf16,292
void load_all_models(27,543
void * provide_nf_with_model(112,3840
void restart_nf(133,4506
void nf_is_gpu_ready(140,4755
void compute_GPU_allocation(161,5493
float find_max_throughput(193,6819
int suggest_gpu_percentage(206,7326
void inform_NF_of_pending_restart(220,7894
void get_shadow_NF_ready(225,8064
void init_zmq(237,8626
int send_message_to_orchestrator(248,8942
zmgr_msg *create_zmsg(create_zmsg259,9311

onvm_mgr/onvm_wakemgr.h,33
#define _ONVM_WAKEMGR_H_54,2360

onvm_mgr/onvm_args.c,592
volatile uint16_t num_nfs 60,2498
uint16_t num_services 63,2596
uint16_t default_service 66,2698
uint8_t is_static_clients;69,2799
ONVM_STATS_OUTPUT stats_destination 72,2887
uint16_t global_stats_sleep_time 75,3026
uint8_t global_verbosity_level 78,3148
static const char *progname;progname81,3219
#define USE_STATIC_IDS102,3541
parse_app_args(121,3908
usage(209,7437
parse_portmask(226,8301
parse_default_service(261,9359
parse_num_services(275,9661
parse_stats_sleep_time(288,9956
parse_stats_output(301,10266
parse_verbosity_level(317,10813
parse_num_clients(331,11155

onvm_mgr/onvm_zk_common.c,164
onvm_zk_create_if_not_exists(54,2347
onvm_zk_create_or_update(72,3009
zk_state_to_string(85,3443
zk_event_type_to_string(103,4029
zk_status_to_string(121,4599

onvm_mgr/onvm_zookeeper.h,764
#define ONVM_ZOOKEEPER_H_52,2339
#define ZK_SERVER 62,2539
#define ZK_CONNECT_ASYNC 64,2576
#define ZK_CONNECT_BLOCKING 65,2603
#define MGR_NODE_BASE 67,2634
#define MGR_NODE_FMT 68,2667
#define MGR_NODE_STR_FMT 69,2708
#define SERVICE_NODE_BASE 71,2748
#define SERVICE_NODE_FMT 72,2785
#define SERVICE_INSTANCE_FMT 73,2866
#define SERVICE_COUNT_FMT 74,2963
#define NF_NODE_BASE 76,3001
#define NF_SERVICE_BASE 77,3028
#define NF_STAT_CHILD_FMT 78,3103
#define NF_INSTANCE_FMT 79,3191
#define NF_STAT_FMT 80,3294
#define ZK_STAT_UPDATE_FREQ 81,3366
#define SCALE_QUEUE_BASE 82,3445
#define SCALE_QUEUE_FMT 83,3479
#define SCALE_DATA_FMT 84,3559
#define MAC_ADDR_FMT 86,3593
#define SCALE_RX_USE_MAX 87,3634
#define SCALE_TIMEOUT_SEC 88,3664

onvm_mgr/onvm_rsync.h,1821
#define _ONVM_RSYNC_H_53,2414
typedef struct rsync_stats 57,2569
        uint64_t tx_state_sync_pkt_counter;60,2700
        uint64_t nf_state_sync_pkt_counter[nf_state_sync_pkt_counter61,2744
        uint64_t tx_state_sync_in_pkt_counter;62,2797
        uint64_t nf_state_sync_in_pkt_counter[nf_state_sync_in_pkt_counter63,2844
        uint64_t transactions_out_counter;64,2900
        uint64_t transactions_in_counter;65,2943
        uint64_t enq_coun_tx_tx_state_latch_ring[enq_coun_tx_tx_state_latch_ring68,3093
        uint64_t drop_count_tx_tx_state_latch_ring[drop_count_tx_tx_state_latch_ring69,3161
        uint64_t enq_count_tx_nf_state_latch_ring[enq_count_tx_nf_state_latch_ring71,3232
        uint64_t drop_count_tx_nf_state_latch_ring[drop_count_tx_nf_state_latch_ring72,3301
        uint64_t enq_coun_tx_tx_state_latch_db_ring[enq_coun_tx_tx_state_latch_db_ring77,3525
        uint64_t drop_count_tx_tx_state_latch_db_ring[drop_count_tx_tx_state_latch_db_ring78,3626
        uint64_t enq_count_tx_nf_state_latch_db_ring[enq_count_tx_nf_state_latch_db_ring80,3730
        uint64_t drop_count_tx_nf_state_latch_db_ring[drop_count_tx_nf_state_latch_db_ring81,3832
        uint64_t enq_coun_tx_tx_state_latch_db_ring[enq_coun_tx_tx_state_latch_db_ring83,3941
        uint64_t drop_count_tx_tx_state_latch_db_ring[drop_count_tx_tx_state_latch_db_ring84,4012
        uint64_t enq_count_tx_nf_state_latch_db_ring[enq_count_tx_nf_state_latch_db_ring86,4086
        uint64_t drop_count_tx_nf_state_latch_db_ring[drop_count_tx_nf_state_latch_db_ring87,4158
        uint64_t enq_count_tx_port_ring[enq_count_tx_port_ring91,4246
        uint64_t drop_count_tx_port_ring[drop_count_tx_port_ring92,4305
}rsync_stats_t;rsync_stats_t94,4366
#define CHECK_IF_ANY_ONE_BIT_SET(98,4523

onvm_mgr/onvm_rsync.c,6259
#define NF_CHECKPOINT_PERIOD_IN_US 64,2776
#define TX_TS_CHECKPOINT_PERIOD_IN_US 65,2966
#define RSYNC_OUT_PORT 69,3425
#define RSYNC_USE_DPDK_TIMER72,3498
volatile uint8_t rx_halt 73,3527
#undef TX_TS_CHECKPOINT_PERIOD_IN_US76,3593
#define TX_TS_CHECKPOINT_PERIOD_IN_US 77,3630
#undef NF_CHECKPOINT_PERIOD_IN_US79,3684
#define NF_CHECKPOINT_PERIOD_IN_US 80,3718
#define MAX_PACKETS_IN_AVG_RTT_AT_HIGH_ARRV_RATE 89,4161
#define MAX_PACKETS_IN_A_ROUND 91,4356
#define MAX_PACKETS_IN_A_ROUND 93,4598
#define PACKET_READ_SIZE_LARGE 96,4860
#define CHECK_FOR_COMMIT_WITH_WAIT 99,5093
#define CHECK_FOR_COMMIT_WITH_NO_WAIT 100,5132
#define MAX_RSYNC_TRANSACTIONS 101,5174
#define REMOTE_SYNC_WAIT_INTERVAL 102,5247
#define MAX_TRANS_COMMIT_WAIT_COUNTER 103,5368
#define MAX_WAIT_TIME_FOR_TRANSACTION_COMMIT 104,5498
#define ENABLE_EXTRA_RSYNC_PRINT_MSGS108,5700
struct rte_timer tx_ts_checkpoint_timer;111,5746
struct rte_timer nf_status_checkpoint_timer;112,5787
#define NEED_REMOTE_TS_TABLE_SYNC 115,5899
#define NEED_REMOTE_NF_STATE_SYNC 116,5942
#define TX_TS_LATCH_BUFFER_FULL 117,5985
#define NF_STATE_LATCH_BUFFER_FULL 118,6028
static dirty_mon_state_map_tbl_txts_t *dirty_state_map_tx_ts dirty_state_map_tx_ts122,6142
static dirty_mon_state_map_tbl_t *dirty_state_map_tx_ts dirty_state_map_tx_ts124,6217
static onvm_per_flow_ts_info_t   *tx_ts_table tx_ts_table126,6328
static dirty_mon_state_map_tbl_txts_t *dirty_state_map_tx_ts_db[dirty_state_map_tx_ts_db131,6504
static dirty_mon_state_map_tbl_t *dirty_state_map_tx_ts_db[dirty_state_map_tx_ts_db133,6605
static onvm_per_flow_ts_info_t   *tx_ts_table_db[tx_ts_table_db135,6742
static dirty_mon_state_map_tbl_txts_t *dirty_state_map_tx_ts_db dirty_state_map_tx_ts_db138,6866
static dirty_mon_state_map_tbl_t *dirty_state_map_tx_ts_db dirty_state_map_tx_ts_db140,6944
static onvm_per_flow_ts_info_t   *tx_ts_table_db tx_ts_table_db142,7058
#define DIRTY_MAP_PER_CHUNK_SIZE 149,7175
#define TXTS_DIRTY_MAP_CHUNK_SIZE 152,7319
#define MAX_TX_TS_ENTRIES 154,7440
#define TXTS_ENTRIES_PER_CHUNK 155,7554
#define MAX_TX_TS_ENTRIES 157,7688
#define TXTS_ENTRIES_PER_CHUNK 158,7797
typedef struct remote_node_config 161,7886
        uint8_t mac_addr_bytes[mac_addr_bytes162,7922
        uint32_t ip_addr;163,7970
}remote_node_config_t;remote_node_config_t164,7996
static remote_node_config_t rsync_node_info 165,8019
#define STATE_TYPE_TX_TS_TABLE 170,8182
#define STATE_TYPE_NF_MEMPOOL 171,8221
#define STATE_TYPE_SVC_MEMPOOL 172,8260
#define MSG_START_OF_REPLAY 173,8299
#define MSG_END_OF_REPLAY 174,8338
#define STATE_REQ_TO_RSP_LSH 175,8377
#define STATE_TYPE_TX_TS_ACK 176,8413
#define STATE_TYPE_NF_MEM_ACK 177,8506
#define STATE_TYPE_SVC_MEM_ACK 178,8599
#define STATE_TYPE_REQ_MASK 179,8693
#define STATE_TYPE_RSP_MASK 180,8732
#define MAX_STATE_SIZE_PER_PACKET 182,8772
typedef struct state_tx_meta 183,8815
        uint8_t state_type;184,8846
        uint8_t trans_id;185,8914
        uint8_t flags;186,8977
        uint8_t nf_or_svc_id;187,9075
        uint32_t start_offset;188,9155
} __attribute__((__packed__)) state_tx_meta_t;190,9299
#define STATE_FLAG_LAST_PACKET_MARKER 191,9346
typedef struct state_transfer_packet_hdr 193,9394
        state_tx_meta_t meta;194,9437
        uint8_t data[data195,9467
} __attribute__((__packed__)) state_transfer_packet_hdr_t;196,9516
typedef struct transfer_ack_packet_hdr 198,9576
        state_tx_meta_t meta;199,9617
} __attribute__((__packed__)) transfer_ack_packet_hdr_t;200,9647
rsync_stats_t rsync_stat;205,9821
uint8_t replay_mode;208,9922
static volatile uint8_t trans_queue[trans_queue211,9995
static onvm_time_t trans_ts[trans_ts212,10056
static uint8_t trans_notify[trans_notify214,10163
static inline void notify_ndsync_commit_to_blocked_NFs(243,11830
static int print_trans_status(269,13271
static int get_transaction_id(280,13531
static uint8_t log_transaction_id(296,14054
static uint8_t clear_transaction_id 313,14647
static uint8_t check_and_clear_elapsed_transactions(330,15193
static int rsync_wait_for_commit_ack(357,16809
static int rsync_wait_for_commit_acks(385,17814
tx_ts_checkpoint_timer_cb(441,19978
nf_status_checkpoint_timer_cb(447,20176
static inline int initialize_rsync_timers(475,21084
static void bswap_rsync_hdr_data(494,22078
inline int rsync_print_rsp_packet(509,22662
static struct rte_mbuf* craft_state_update_packet(520,23289
static int rsync_tx_ts_state_to_remote(564,25203
static int rsync_nf_state_to_remote(637,28913
static int rsync_tx_ts_state_from_remote(803,40148
static int rsync_nf_state_from_remote(823,41189
#define ENABLE_REPLAY_LATENCY_PROFILER837,42103
static onvm_interval_timer_t ts;839,42180
static int rsycn_handle_start_of_replay(841,42220
static int rsycn_handle_end_of_replay(850,42714
static inline uint64_t tx_ts_map_tag_index_to_dirty_chunk_bit_index(862,43366
static inline void tx_ts_update_dirty_state_index(871,43956
static inline int update_flow_tx_ts_table(903,45186
static inline int initialize_tx_ts_table(941,47259
static inline int send_packets_out(986,49361
static inline int log_transaction_and_send_packets_out(1023,50690
int transmit_tx_port_packets(1028,51059
static int transmit_tx_tx_state_latch_rings(1075,53251
static int transmit_tx_nf_state_latch_rings(1120,55329
static inline int get_flow_entry_index(1162,57124
static int extract_and_parse_tx_port_packets(1186,58283
static inline int rsync_process_req_packet(1338,66652
static inline int rsync_process_rsp_packet(1392,69292
int rsync_process_rsync_in_pkts(1411,70351
#define MAX_EXTRACT_AND_PARSE_LOOP_COUNTER 1446,72409
#define MAX_EXTRACT_AND_PARSE_LOOP_COUNTER 1448,72462
static int rsync_start_simple_pico_nf(1454,72654
static int rsync_start_simple_pico(1499,74721
static int rsync_start_simple(1538,76167
int rsync_start_only_db(1600,79015
static int rsync_start_simple_multi_db(1659,81667
static inline int rsync_start_simple_multi_db(1765,87144
static int rsync_start_simple_db(1916,94323
static int rsync_start_optimal_db(1999,98780
inline int rsync_start(2090,103971
int onvm_print_rsync_stats(2121,104763
int notify_replay_mode(2176,110478
rsync_main(2186,110931

onvm_mgr/onvm_zk_common.h,66
#define ONVM_ZK_COMMON_H_52,2340
#define RTE_LOGTYPE_ZK 56,2401

onvm_mgr/onvm_stats.h,1430
#define _ONVM_STATS_H_52,2320
#define ONVM_STR_STATS_STDOUT 60,2426
#define ONVM_STR_STATS_STDERR 61,2465
#define ONVM_STR_STATS_WEB 62,2504
#define ONVM_STATS_FOPEN_ARGS 64,2538
#define ONVM_STATS_PATH_BASE 65,2573
#define ONVM_JSON_STATS_FILE 66,2617
#define ONVM_STATS_FILE 67,2690
#define ONVM_JSON_PORT_STATS_KEY 69,2753
#define ONVM_JSON_NF_STATS_KEY 70,2804
#define ONVM_JSON_TIMESTAMP_KEY 71,2851
#define ONVM_SNPRINTF(73,2899
#define ONVM_RAW_STATS_DUMP 82,3494
        ONVM_STATS_NONE 85,3540
        ONVM_STATS_STDOUT,86,3569
        ONVM_STATS_STDERR,87,3596
        ONVM_STATS_WEB88,3623
} ONVM_STATS_OUTPUT;89,3646
cJSON* onvm_json_root;91,3668
cJSON* onvm_json_port_stats_arr;92,3691
cJSON* onvm_json_nf_stats_arr;93,3724
cJSON* onvm_json_port_stats[onvm_json_port_stats94,3755
cJSON* onvm_json_nf_stats[onvm_json_nf_stats95,3802
typedef struct onvm_stats_snapshot 98,3919
        uint64_t rx_delta;99,3956
        uint64_t tx_delta;100,4026
        uint64_t rx_drop_delta;101,4096
        uint64_t tx_drop_delta;102,4164
        uint32_t arrival_rate;103,4232
        uint32_t rx_rate;104,4306
        uint32_t serv_rate;105,4365
        uint32_t tx_rate;106,4424
        uint32_t rx_drop_rate;107,4498
        uint32_t tx_drop_rate;108,4564
}onvm_stats_snapshot_t;onvm_stats_snapshot_t109,4630
#define onvm_stats_clear_all_nfs 171,6443
#define onvm_stats_clear_nf(181,6662

onvm_mgr/onvm_zk_watch.c,25
onvm_zk_watcher(59,2461
